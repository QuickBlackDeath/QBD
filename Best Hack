// ==UserScript==
// @name           Red Dragon 1v1 Mod Real
// @namespace      For That Sad Guy!
// @version        Thanks For Being Loyal!
// @description    Enjoy!
// @author         Archebor
// @match          *://moomoo.io/*
// @match          *://dev.moomoo.io/*
// @match          *://sandbox.moomoo.io/*
// @require https://greasyfork.org/scripts/368273-msgpack/code/msgpack.js?version=598723
// @require http://code.jquery.com/jquery-3.3.1.min.js
// @require https://code.jquery.com/ui/1.12.0/jquery-ui.min.js
// @require https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.0/jquery-confirm.min.js
// @require https://pastebin.com/raw/R7LJ4nWf
// ==/UserScript==

var bb = false;
var cps = false;
var chat = false;
if (chat = true) {
    var ChatSpam1;
    var ChatSpam2;
    var ChatSpam3;
    var ChatSpam4;
    var ChatSpam5;
    var ChatSpam6;
    var ChatSpam7;
    var ChatSpam8;
    var ChatSpam9;
    var ChatSpam10;
    var ChatSpam11;
    var ChatSpam12;
    var ChatSpam13;
    var ChatSpam14;
    var ChatSpam15;
    var ChatSpam16;
    var ChatSpam17;
    var ChatSpam18;
    var ChatSpam19;
    var ChatSpam20;
    var ChatSpam21;
    var ChatSpam22;
    var ChatSpam = true;

    function ChatSpamFC1() {
        doNewSend(['ch', ['Hi.']]);
        clearTimeout(ChatSpam1);
        ChatSpam1 = setTimeout(
            function () {
                ChatSpamFC2()
            }, 1940)
    }

    function ChatSpamFC2() {
        doNewSend(['ch', [
            'The FitnessGram PACER Test is'
            ]]);
        clearTimeout(ChatSpam2);
        ChatSpam3 = setTimeout(
            function () {
                ChatSpamFC3()
            }, 1940)
    }

    function ChatSpamFC3() {
        doNewSend(['ch', [
            'a multistage aerobic capacity'
            ]]);
        clearTimeout(ChatSpam3);
        ChatSpam4 = setTimeout(
            function () {
                ChatSpamFC4()
            }, 1940)
    }

    function ChatSpamFC4() {
        doNewSend(['ch', [
            'test that progressively gets'
            ]]);
        clearTimeout(ChatSpam4);
        ChatSpam5 = setTimeout(
            function () {
                ChatSpamFC5()
            }, 1940)
    }

    function ChatSpamFC5() {
        doNewSend(['ch', [
            'more difficult as it continues'
            ]]);
        clearTimeout(ChatSpam5);
        ChatSpam6 = setTimeout(
            function () {
                ChatSpamFC6()
            }, 1940)
    }

    function ChatSpamFC6() {
        doNewSend(['ch', [
            'The test is used to measure a'
            ]]);
        clearTimeout(ChatSpam6);
        ChatSpam7 = setTimeout(
            function () {
                ChatSpamFC7()
            }, 1940)
    }

    function ChatSpamFC7() {
        doNewSend(['ch', [
            'student\'s aerobic capacity as'
            ]]);
        clearTimeout(ChatSpam7);
        ChatSpam8 = setTimeout(
            function () {
                ChatSpamFC8()
            }, 1940)
    }

    function ChatSpamFC8() {
        doNewSend(['ch', [
            'part of the FitnessGram assess'
            ]]);
        clearTimeout(ChatSpam8);
        ChatSpam9 = setTimeout(
            function () {
                ChatSpamFC9()
            }, 1940)
    }

    function ChatSpamFC9() {
        doNewSend(['ch', [
            'ment. Students run back and fo'
            ]]);
        clearTimeout(ChatSpam9);
        ChatSpam10 = setTimeout(
            function () {
                ChatSpamFC10()
            }, 1940)
    }

    function ChatSpamFC10() {
        doNewSend(['ch', [
            'rth as many times as they can,'
            ]]);
        clearTimeout(ChatSpam10);
        ChatSpam11 = setTimeout(
            function () {
                ChatSpamFC11()
            }, 1940)
    }

    function ChatSpamFC11() {
        doNewSend(['ch', [
            'each lap signaled by a beep so'
            ]]);
        clearTimeout(ChatSpam11);
        ChatSpam12 = setTimeout(
            function () {
                ChatSpamFC12()
            }, 1940)
    }

    function ChatSpamFC12() {
        doNewSend(['ch', [
            'und. The test get progressivel'
            ]]);
        clearTimeout(ChatSpam12);
        ChatSpam13 = setTimeout(
            function () {
                ChatSpamFC13()
            }, 1940)
    }

    function ChatSpamFC13() {
        doNewSend(['ch', [
            'y faster as it continues until'
            ]]);
        clearTimeout(ChatSpam13);
        ChatSpam14 = setTimeout(
            function () {
                ChatSpamFC14()
            }, 1940)
    }

    function ChatSpamFC14() {
        doNewSend(['ch', [
            'the student reaches their max '
            ]]);
        clearTimeout(ChatSpam14);
        ChatSpam15 = setTimeout(
            function () {
                ChatSpamFC15()
            }, 1940)
    }

    function ChatSpamFC15() {
        doNewSend(['ch', [
            'lap score.The PACER Test scor'
            ]]);
        clearTimeout(ChatSpam15);
        ChatSpam16 = setTimeout(
            function () {
                ChatSpamFC16()
            }, 1940)
    }

    function ChatSpamFC16() {
        doNewSend(['ch', [
            'e is combined in the FitnessGr'
            ]]);
        clearTimeout(ChatSpam16);
        ChatSpam17 = setTimeout(
            function () {
                ChatSpamFC7()
            }, 1940)
    }

    function ChatSpamFC17() {
        doNewSend(['ch', [
            'am software with scores for mu'
            ]]);
        clearTimeout(ChatSpam17);
        ChatSpam18 = setTimeout(
            function () {
                ChatSpamFC18()
            }, 1940)
    }

    function ChatSpamFC18() {
        doNewSend(['ch', [
            'scular strength, endurance, fl'
            ]]);
        clearTimeout(ChatSpam18);
        ChatSpam19 = setTimeout(
            function () {
                ChatSpamFC19()
            }, 1940)
    }

    function ChatSpamFC19() {
        doNewSend(['ch', [
            'exibility and body composition'
            ]]);
        clearTimeout(ChatSpam19);
        ChatSpam20 = setTimeout(
            function () {
                ChatSpamFC20()
            }, 1940)
    }

    function ChatSpamFC20() {
        doNewSend(['ch', [
            'to determine whether a student'
            ]]);
        clearTimeout(ChatSpam20);
        ChatSpam21 = setTimeout(
            function () {
                ChatSpamFC21()
            }, 1940)
    }

    function ChatSpamFC21() {
        doNewSend(['ch', [
            'is in the Healthy Fitness Zone'
            ]]);
        clearTimeout(ChatSpam21);
        ChatSpam22 = setTimeout(
            function () {
                ChatSpamFC22()
            }, 1940)
    }

    function ChatSpamFC22() {
        doNewSend(['ch', [
            'or the Needs Improvement Zone.'
            ]]);
        clearTimeout(ChatSpam22);
        ChatSpam1 = setTimeout(
            function () {
                ChatSpamFC1()
            }, 1940)
    }
};
var autoplague = true;
document['addEventListener'](
    'mousedown', AutoPlague, false);

function AutoPlague(_0xa196x33) {
    if (_0xa196x33['button'] == 2) {
        if (autoplague == true) {
            if (myPlayer['hat'] != 7 &&
                myPlayer['accessory'] !=
                0) {
                a = myPlayer['hat'];
                rr = myPlayer[
                    'accessory']
            };
            hat(21);
            acc(55)
        }
    }
}
document['addEventListener']('mouseup',
    AutoPlagueD, false);

function AutoPlagueD(_0xa196x33) {
    if (_0xa196x33['button'] == 2) {
        if (autoplague == true) {
            hat(a);
            acc(rr)
        }
    }
}
setInterval(() => {
    storeBuy(7);
    storeBuy(53);
    storeBuy(12);
    storeBuy(6);
    storeBuy(40);
    storeBuy(31);
    storeBuy(15);
    storeBuy(20);
    storeBuy(11);
    storeBuy(26);
    storeBuy(21);
    storeBuy(22)
}, 0);
setInterval(() => {
    if (wingmod == true) {
        doNewSend(['13c', [0,
            13, 1]]);
        setTimeout(() => {
            doNewSend(['13c',
                [0, 19,
                    1
                    ]
                ])
        }, 10)
    }
}, 10);
setInterval(() => {
    if (fastheal == true) {
        place(foodType, null)
    }
}, 0);
let mouseX;
let mouseY;
let width;
let height;
setInterval(() => {
    if (autoaim == true) {
        doNewSend(['2', [
            nearestEnemyAngle
            ]])
    }
}, 10);
setInterval(() => {
    if (qh == 1) {
        place(foodType)
    }
}, 0);
setInterval(() => {
    if (CORESTATE['intrap'][
            'active'] == true &&
        autobreaktrap == true) {
        doNewSend(['13c', [0,
            40, 0]]);
        doNewSend(['c', [1]]);
        setTimeout(() => {
            doNewSend(['13c',
                [0, 26,
                    0
                    ]
                ]);
            doNewSend(['c',
                [
                    null]
                ])
        }, 100)
    }
}, 300);
setInterval(() => {
    number = document[
        'getElementById'](
        'hpq')['value']
}, 0);
setInterval(() => {
    if (hatToggle == 1) {
        if (oldHat !=
            normalHat) {
            hat(normalHat);
            console['log'](
                'Tried. - Hat'
                )
        };
        if (oldAcc !=
            normalAcc) {
            acc(normalAcc);
            console['log'](
                'Tried. - Acc'
                )
        };
        oldHat = normalHat;
        oldAcc = normalAcc
    }
}, 25);

function normal() {
    hat(normalHat);
    acc(normalAcc)
}

function aim(_0xa196x3b, _0xa196x3c) {
    var _0xa196x3d = document[
        'getElementById'](
        'gameCanvas');
    _0xa196x3d['dispatchEvent'](
        new MouseEvent(
        'mousemove', {
            clientX: _0xa196x3b,
            clientY: _0xa196x3c
        }))
}
let coreURL = new URL(window['location']
    ['href']);
window['sessionStorage']['force'] =
    coreURL['searchParams']['get'](
    'fc');
var AIH = false;
var nearestEnemy;
var nearestEnemyAngle;
var isEnemyNear;
var instaSpeed = 230;
var autopit = false;
var automill = false;
var changehat = false;
var wingmod = false;
var primary;
var secondary;
var foodType;
var wallType;
var spikeType;
var millType;
var mineType;
var boostType;
var turretType;
var spawnpadType;
var autoaim = false;
var tick = 1;
var oldHat;
var oldAcc;
var enemiesNear;
var normalHat;
var normalAcc;
var ws;
var um = 0;
var msgpack5 = msgpack;
var boostDir;
let myPlayer = {
    id: null,
    x: null,
    y: null,
    dir: null,
    object: null,
    weapon: null,
    clan: null,
    isLeader: null,
    hat: null,
    accessory: null,
    isSkull: null
};
let healSpeed = 180;
let healToggle = 0;
let hatToggle = 0;
var ReverseLagInsta = 0;
var LagInsta = 0;
var RenizInsta = 0;
var LegendaryInsta = 0;
var nolaginsta = 0;
var lasthat, lastacc, leadermsg,
    leaderid;
var fmsg = false;
var qh = 0;
var fastheal = false;
var antispeedlmao = 0;
var Antiweapon = false;
var Antibow = false;
var number;
var CORESTATE = {
    intrap: {
        active: false
    }
};
var MYID;
var allTraps = [];
var allMooMooObjects = {};
var EnemyNear;
var autoinsta = false;
var autobreaktrap = false;

function Random(_0xa196x79,
_0xa196x7a) {
    return Math['floor'](Math['random']
    () * _0xa196x7a) + _0xa196x79
}
document['msgpack'] = msgpack;

function n() {
    this['buffer'] = new Uint8Array([
    0]);
    this['buffer']['__proto__'] =
        new Uint8Array;
    this['type'] = 0
}
WebSocket['prototype']['oldSend'] =
    WebSocket['prototype']['send'];
WebSocket['prototype']['send'] =
    function (m) {
        if (!ws) {
            document['ws'] = this;
            ws = this;
            socketFound(this)
        };
        this['oldSend'](m)
    };

function socketFound(_0xa196x7e) {
    _0xa196x7e['addEventListener'](
        'message',
        function (_0xa196x7f) {
            handleMessage(
                _0xa196x7f)
        })
}

function handleMessage(m) {
    let _0xa196x81 = msgpack5['decode'](
        new Uint8Array(m['data']));
    let _0xa196x82;
    if (_0xa196x81['length'] > 1) {
        _0xa196x82 = [_0xa196x81[0], ...
            _0xa196x81[1]];
        if (_0xa196x82[
            1] instanceof Array) {
            _0xa196x82 = _0xa196x82
        }
    } else {
        _0xa196x82 = _0xa196x81
    };
    let _0xa196x83 = _0xa196x82[0];
    if (!_0xa196x82) {
        return
    };
    if (_0xa196x83 === 'io-init') {
        let _0xa196x3d = document[
            'getElementById'](
            'gameCanvas');
        width = _0xa196x3d[
            'clientWidth'];
        height = _0xa196x3d[
            'clientHeight'];
        $(window)['resize'](
    function () {
            width = _0xa196x3d[
                'clientWidth'
                ];
            height = _0xa196x3d[
                'clientHeight'
                ]
        });
        _0xa196x3d['addEventListener'](
            'mousemove', (
                _0xa196x33) => {
                mouseX = _0xa196x33[
                    'clientX'];
                mouseY = _0xa196x33[
                    'clientY']
            })
    };
    if (_0xa196x83 == '1' && myPlayer[
            'id'] == null) {
        myPlayer['id'] = _0xa196x82[1]
    };
    var _0xa196x84 = '!';
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == leaderid) {
        if (fmsg == true) {
            doNewSend(['ch', [
                _0xa196x82[
                    2]]])
        }
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2] ==
        _0xa196x84 + 'insta') {
        setTimeout(() => {
            insta();
            doNewSend(['ch', [
                'Red Dragon - Command Insta'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2] ==
        _0xa196x84 + 'bow') {
        setTimeout(() => {
            bowinsta();
            doNewSend(['ch', [
                'Red Dragon - Command Bow'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2] ==
        _0xa196x84 + 'fmsg1') {
        setTimeout(() => {
            fmsg = true;
            doNewSend(['ch', [
                'Red Dragon - Following Leader Msg'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2] ==
        _0xa196x84 + 'spit') {
        setTimeout(() => {}, 500);
        if (_0xa196x82[0] == 'ch' &&
            _0xa196x82[1] == myPlayer[
                'id'] && _0xa196x82[
            2] == _0xa196x84 + 'fmsg0'
            ) {
            setTimeout(() => {
                fmsg = false;
                doNewSend(['ch',
                    [
                        'Red Dragon - Unfollowed']
                    ])
            }, 500)
        }
    };
    let _0xa196x85 = [];
    let _0xa196x86 = false;
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ')[0] == _0xa196x84 +
        'crash') {
        _0xa196x86 = true;
        for (let _0xa196x87 =
            0; _0xa196x87 <
            20000; _0xa196x87++) {
            _0xa196x85['push'](
                setInterval(
                    function () {
                        if (!ws ||
                            ws[
                                'readyState'] !==
                            1) {
                            return clearInterval(
                                _0xa196x85[
                                    'shift'
                                    ]
                                ()
                                )
                        };
                        let _0xa196x88 =
                            new Uint8Array(
                                50);
                        for (let _0xa196x87 =
                                0; _0xa196x87 <
                            _0xa196x88[
                                'length'
                                ]; _0xa196x87++
                            ) {
                            _0xa196x88
                                [
                                    _0xa196x87] =
                                Math[
                                    'floor'
                                    ]
                                (Math[
                                        'random']
                                    () *
                                    359
                                    )
                        };
                        ws['send'](
                            _0xa196x88
                            )
                    }))
        }
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ') == _0xa196x84 + 'pb') {
        doNewSend(['6', [5]]);
        doNewSend(['6', [17]]);
        doNewSend(['6', [31]]);
        doNewSend(['6', [23]]);
        doNewSend(['6', [9]]);
        doNewSend(['6', [33]]);
        setTimeout(() => {
            doNewSend(['ch', [
                'Red Dragon - Poleaarm+Bow'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ') == _0xa196x84 + 'open'
        ) {
        modal['style']['display'] =
            'block';
        setTimeout(() => {
            doNewSend(['ch', [
                'Red Dragon - Menu Opened'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ') == _0xa196x84 + 'close'
        ) {
        modal['style']['display'] =
            'none';
        setTimeout(() => {
            doNewSend(['ch', [
                'Red Dragon - Menu Closed'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ') == _0xa196x84 + 'pm') {
        doNewSend(['6', [5]]);
        doNewSend(['6', [17]]);
        doNewSend(['6', [31]]);
        doNewSend(['6', [23]]);
        doNewSend(['6', [9]]);
        doNewSend(['6', [33]]);
        doNewSend(['6', [28]]);
        doNewSend(['6', [15]]);
        setTimeout(() => {
            doNewSend(['ch', [
                'Red Dragon - Polearm+Musket'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ') == _0xa196x84 + 'mill'
        ) {
        doNewSend(['6', [28]]);
        setTimeout(() => {
            doNewSend(['ch', [
                'Red Dragon - Mill'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ') == _0xa196x84 + 'km') {
        doNewSend(['6', [3]]);
        doNewSend(['6', [17]]);
        doNewSend(['6', [31]]);
        doNewSend(['6', [23]]);
        doNewSend(['6', [9]]);
        doNewSend(['6', [33]]);
        doNewSend(['6', [4]]);
        doNewSend(['6', [15]]);
        setTimeout(() => {
            doNewSend(['ch', [
                'Red Dragon - Katana+Musket'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ') == _0xa196x84 + 'kh') {
        doNewSend(['6', [3]]);
        doNewSend(['6', [17]]);
        doNewSend(['6', [31]]);
        doNewSend(['6', [27]]);
        doNewSend(['6', [10]]);
        doNewSend(['6', [37]]);
        doNewSend(['6', [4]]);
        doNewSend(['6', [25]]);
        setTimeout(() => {
            doNewSend(['ch', [
                'Red Dragon - Katana+Hammer'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ') == _0xa196x84 + 'dp') {
        doNewSend(['6', [7]]);
        doNewSend(['6', [17]]);
        doNewSend(['6', [31]]);
        doNewSend(['6', [23]]);
        doNewSend(['6', [10]]);
        doNewSend(['6', [33]]);
        doNewSend(['6', [28]]);
        doNewSend(['6', [25]]);
        setTimeout(() => {
            doNewSend(['ch', [
                'Red Dragon - Dagger-Mill'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ') == _0xa196x84 + 'sh') {
        doNewSend(['6', [8]]);
        doNewSend(['6', [17]]);
        doNewSend(['6', [31]]);
        doNewSend(['6', [23]]);
        doNewSend(['6', [10]]);
        doNewSend(['6', [33]]);
        doNewSend(['6', [28]]);
        doNewSend(['6', [25]]);
        setTimeout(() => {
            doNewSend(['ch', [
                'Red Dragon - Stick+Hammer'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ') == _0xa196x84 + 'gb') {
        doNewSend(['6', [1]]);
        doNewSend(['6', [17]]);
        doNewSend(['6', [31]]);
        doNewSend(['6', [23]]);
        doNewSend(['6', [9]]);
        doNewSend(['6', [33]]);
        doNewSend(['6', [2]]);
        doNewSend(['6', [13]]);
        setTimeout(() => {
            doNewSend(['ch', [
                'Red Dragon - Gaxe+Bow'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ') == _0xa196x84 + 'gm') {
        doNewSend(['6', [1]]);
        doNewSend(['6', [17]]);
        doNewSend(['6', [31]]);
        doNewSend(['6', [23]]);
        doNewSend(['6', [9]]);
        doNewSend(['6', [33]]);
        doNewSend(['6', [2]]);
        doNewSend(['6', [15]]);
        setTimeout(() => {
            doNewSend(['ch', [
                'Red Dragon - Gaxe+Musket'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ') == _0xa196x84 + 'khp'
        ) {
        doNewSend(['6', [3]]);
        doNewSend(['6', [17]]);
        doNewSend(['6', [31]]);
        doNewSend(['6', [27]]);
        doNewSend(['6', [10]]);
        doNewSend(['6', [37]]);
        doNewSend(['6', [4]]);
        doNewSend(['6', [36]]);
        setTimeout(() => {
            doNewSend(['ch', [
                'Red Dragon - Katana+Hammer+SP'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ') == _0xa196x84 + 'rb') {
        doNewSend(['6', [13]]);
        setTimeout(() => {
            doNewSend(['ch', [
                'Red Dragon - Auto Bow Spam'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ') == _0xa196x84 + 'chat'
        ) {
        chat = true;
        setTimeout(() => {
            doNewSend(['ch', [
                'Red Dragon - Auto Chat ON'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ') == _0xa196x84 +
        'mill+pike') {
        doNewSend(['6', [28]]);
        doNewSend(['6', [25]]);
        setTimeout(() => {
            doNewSend(['ch', [
                'Red Dragon - Mill+Pike'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ') == _0xa196x84 +
        'katana') {
        doNewSend(['6', [2]]);
        setTimeout(() => {
            doNewSend(['ch', [
                'Red Dragon - Katana'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ') == _0xa196x84 + 'axe'
        ) {
        doNewSend(['6', [2]]);
        setTimeout(() => {
            doNewSend(['ch', [
                'Red Dragon - Axe'
                ]])
        }, 500)
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2]['split'](
            ' ')[0] == _0xa196x84 +
        'unclan') {
        setTimeout(() => {
            doNewSend(['ch', [
                'Left Clan'
                ]]);
            doNewSend(['9', [
                null
                ]])
        }, 500)
    };
    a;
    var _0xa196x89 = 'pls';
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] == myPlayer[
        'id'] && _0xa196x82[2][
            'startsWith'](
            `${''}${_0xa196x89}${''}`)
        ) {
        switch (_0xa196x82[2]['split'](
                ' ')[1]) {
        case 'howgay':
            setTimeout(() => {
                doNewSend(['ch',
                    ['Im ' +
                        Random(
                            1,
                            100
                            ) +
                        '% gay!'
                        ]
                    ])
            }, 500);
            break;
        case 'pp':
            setTimeout(() => {
                doNewSend(['ch',
                    ['My pp is ' +
                        Random(
                            1,
                            20
                            ) +
                        'cm!'
                        ]
                    ])
            }, 500);
            break;
        case 'simp':
            setTimeout(() => {
                doNewSend(['ch',
                    ['Im ' +
                        Random(
                            1,
                            100
                            ) +
                        '% simp!'
                        ]
                    ])
            }, 500);
            break;
        case 'pro':
            setTimeout(() => {
                doNewSend(['ch',
                    ['Im ' +
                        Random(
                            1,
                            100
                            ) +
                        '% pro!'
                        ]
                    ])
            }, 500);
            break;
        case 'noob':
            setTimeout(() => {
                doNewSend(['ch',
                    ['Im ' +
                        Random(
                            1,
                            100
                            ) +
                        '% noob!'
                        ]
                    ])
            }, 500);
            break
        }
    };
    if (_0xa196x82[0] == 'ch' &&
        _0xa196x82[1] != myPlayer[
        'id'] && _0xa196x82[2][
            'startsWith'](
            `${''}${_0xa196x89}${''}`)
        ) {
        switch (_0xa196x82[2]['split'](
                ' ')[1]) {
        case 'howgay':
            setTimeout(() => {
                doNewSend(['ch',
                    ['You are ' +
                        Random(
                            1,
                            100
                            ) +
                        '% gay!'
                        ]
                    ])
            }, 500);
            setTimeout(() => {
                doNewSend(['ch',
                    [
                        'Welcome to use Dank Memer!']
                    ])
            }, 1500);
            break;
        case 'pp':
            setTimeout(() => {
                doNewSend(['ch',
                    ['Your pp is ' +
                        Random(
                            1,
                            20
                            ) +
                        'cm!'
                        ]
                    ])
            }, 500);
            setTimeout(() => {
                doNewSend(['ch',
                    [
                        'Welcome to use Dank Memer!']
                    ])
            }, 1500);
            break;
        case 'simp':
            setTimeout(() => {
                doNewSend(['ch',
                    ['You are ' +
                        Random(
                            1,
                            100
                            ) +
                        '% simp!'
                        ]
                    ])
            }, 500);
            setTimeout(() => {
                doNewSend(['ch',
                    [
                        'Welcome to use Dank Memer!']
                    ])
            }, 1500);
            break;
        case 'pro':
            setTimeout(() => {
                doNewSend(['ch',
                    ['You are ' +
                        Random(
                            1,
                            100
                            ) +
                        '% pro!'
                        ]
                    ])
            }, 500);
            setTimeout(() => {
                doNewSend(['ch',
                    [
                        'Welcome to use Dank Memer!']
                    ])
            }, 1500);
            break;
        case 'noob':
            setTimeout(() => {
                doNewSend(['ch',
                    ['You are ' +
                        Random(
                            1,
                            100
                            ) +
                        '% noob!'
                        ]
                    ])
            }, 500);
            setTimeout(() => {
                doNewSend(['ch',
                    [
                        'Welcome to use Dank Memer!']
                    ])
            }, 1500);
            break
        }
    };
    var _0xa196x8a = [];
    for (let _0xa196x8b of allTraps) {
        let _0xa196x8c = _0xa196x8b[1];
        let _0xa196x8d = _0xa196x8b[2];
        let _0xa196x8e = _0xa196x8b[
            _0xa196x8b['length'] - 2
            ];
        console['log'](myPlayer);
        let _0xa196x8f = Math['sqrt']((
                _0xa196x8c -
                myPlayer['x']) **
            2 + (_0xa196x8d -
                myPlayer['y']) ** 2);
        console['log'](_0xa196x8f);
        if (_0xa196x8e == 15 &&
            _0xa196x8f < 90) {
            for (let _0xa196x90 =
                0; _0xa196x90 <
                4; _0xa196x90++) {
                let _0xa196x91 =
                    myPlayer['dir'] +
                    toRad(_0xa196x90 *
                        72);
                place(millType,
                    _0xa196x91);
                doNewSend(['ch', [
                    'Red Dragon - Anti Trap'
                    ]])
            };
            place(millType, 72);
            CORESTATE['intrap'][
                'active'] = true;
            CORESTATE['intrap'][
                'extra'] = _0xa196x8b[0]
        } else {
            if (_0xa196x8e == 15 &&
                _0xa196x8f < 1500) {
                _0xa196x8a['push'](
                    _0xa196x8b)
            }
        }
    };
    allTraps = _0xa196x8a;
    if (_0xa196x82[0] == '12') {
        let _0xa196x8a = [];
        for (let _0xa196x92 of
            allTraps) {
            if (_0xa196x92[_0xa196x92[
                    'length'] - 2] !=
                _0xa196x82[1]) {
                _0xa196x8a['push'](
                    _0xa196x92)
            }
        };
        allTraps = _0xa196x8a;
        if (Object['keys'](
                allMooMooObjects)[
                'includes'](_0xa196x82[
                1].toString())) {
            allMooMooObjects[_0xa196x82[
                1]]['remove']()
        };
        if (CORESTATE['intrap'][
                'active']) {
            if (CORESTATE['intrap'][
                    'extra'] ==
                _0xa196x82[1]) {
                CORESTATE['intrap'][
                        'active'] =
                    false;
                let _0xa196x8a = [];
                for (let _0xa196x92 of
                        allTraps) {
                    if (_0xa196x92[
                            _0xa196x92[
                                'length'
                                ] - 2
                            ] !=
                        _0xa196x82[1]) {
                        _0xa196x8a[
                            'push'](
                            _0xa196x92
                            )
                    }
                };
                allTraps = _0xa196x8a
            }
        }
    };
    if (_0xa196x82[0] == '1' && !MYID) {
        MYID = _0xa196x82[1]
    };
    if (_0xa196x82[0] == '6') {
        var _0xa196x93 = _0xa196x82[1];
        if (_0xa196x93[_0xa196x93[
                'length'] - 1]
            .toString() == MYID) {
            if (window['innerWidth'] >=
                770) {
                console['log'](
                    _0xa196x93);
                var _0xa196x94 =
                    `${'actionBarItem'}${_0xa196x93[_0xa196x93['length']- 2]+ 16}${''}`;
                var _0xa196x95 =
                    document[
                        'getElementById'
                        ](_0xa196x94)[
                        'style'][
                        'backgroundImage'
                        ].toString()[
                        'match'](
                        /url\("(.+)?(?=")/
                        )[1];
                console['info'](
                    _0xa196x95)
            }
        } else {
            console['log'](_0xa196x93);
            for (var _0xa196x87 =
                0; _0xa196x87 <
                _0xa196x93['length'] /
                8; _0xa196x87 += 1) {
                let _0xa196x8b =
                    _0xa196x93['slice'](
                        _0xa196x87 * 8,
                        (_0xa196x87 +
                        1) * 8);
                console['log'](
                    _0xa196x8b);
                let _0xa196x8e =
                    _0xa196x8b[
                        _0xa196x8b[
                            'length'] -
                        2];
                if (_0xa196x8e == 15) {
                    allTraps['push'](
                        _0xa196x8b)
                }
            }
        }
    };
    if (_0xa196x83 == '33') {
        enemiesNear = [];
        for (let _0xa196x87 =
            0; _0xa196x87 < _0xa196x82[
                1]['length'] /
            13; _0xa196x87++) {
            let _0xa196x96 = _0xa196x82[
                1]['slice'](13 *
                _0xa196x87, 13 *
                _0xa196x87 + 13);
            if (_0xa196x96[0] ==
                myPlayer['id']) {
                myPlayer['x'] =
                    _0xa196x96[1];
                myPlayer['y'] =
                    _0xa196x96[2];
                myPlayer['dir'] =
                    _0xa196x96[3];
                myPlayer['object'] =
                    _0xa196x96[4];
                myPlayer['weapon'] =
                    _0xa196x96[5];
                myPlayer['clan'] =
                    _0xa196x96[7];
                myPlayer['isLeader'] =
                    _0xa196x96[8];
                myPlayer['hat'] =
                    _0xa196x96[9];
                myPlayer['accessory'] =
                    _0xa196x96[10];
                myPlayer['isSkull'] =
                    _0xa196x96[11]
            } else {
                if (_0xa196x96[7] !=
                    myPlayer['clan'] ||
                    _0xa196x96[7] ===
                    null) {
                    enemiesNear['push'](
                        _0xa196x96)
                }
            }
        }
    };
    isEnemyNear = false;
    if (enemiesNear) {
        nearestEnemy = enemiesNear[
            'sort']((a,
            _0xa196x98) => {
                return dist(a,
                        myPlayer) -
                    dist(_0xa196x98,
                        myPlayer)
            })[0]
    };
    if (nearestEnemy) {
        nearestEnemyAngle = Math[
            'atan2'](nearestEnemy[
            2] - myPlayer['y'],
            nearestEnemy[1] -
            myPlayer['x']);
        if (Math['sqrt'](Math['pow']((
                    myPlayer['y'] -
                    nearestEnemy[2]
                    ), 2) + Math[
                'pow']((myPlayer[
                        'x'] -
                    nearestEnemy[1]
                    ), 2)) < 215) {
            isEnemyNear = true;
            if (autoaim == false &&
                myPlayer['hat'] != 7 &&
                myPlayer['hat'] != 53) {
                normalHat = 6;
                if (primary != 8) {
                    normalAcc = 21
                }
            }
        };
        if (Math['sqrt'](Math['pow']((
                    myPlayer['y'] -
                    nearestEnemy[2]
                    ), 2) + Math[
                'pow']((myPlayer[
                        'x'] -
                    nearestEnemy[1]
                    ), 2)) < 200) {
            EnemyNear = true;
            if (autoinsta == true) {
                autoinsta = false;
                autoaim = true;
                doNewSend(['5', [
                    primary,
                    true]]);
                doNewSend(['7', [3]]);
                hat(7);
                acc(18);
                doNewSend(['ch', [
                    'Red Dragon - Range Insta'
                    ]]);
                setTimeout(() => {
                    doNewSend(['5',
                        [primary,
                            true
                            ]
                        ])
                }, 10);
                setTimeout(() => {
                    doNewSend(['5',
                        [primary,
                            true
                            ]
                        ])
                }, 20);
                setTimeout(() => {
                    doNewSend(['5',
                        [primary,
                            true
                            ]
                        ])
                }, 30);
                setTimeout(() => {
                    doNewSend(['5',
                        [primary,
                            true
                            ]
                        ])
                }, 40);
                setTimeout(() => {
                    doNewSend(['5',
                        [primary,
                            true
                            ]
                        ])
                }, 50);
                setTimeout(() => {
                    doNewSend(['5',
                        [primary,
                            true
                            ]
                        ])
                }, 60);
                setTimeout(() => {
                    doNewSend(['5',
                        [primary,
                            true
                            ]
                        ])
                }, 70);
                setTimeout(() => {
                    doNewSend(['5',
                        [primary,
                            true
                            ]
                        ])
                }, 80);
                setTimeout(() => {
                    doNewSend(['5',
                        [secondary,
                            true
                            ]
                        ]);
                    hat(53);
                    acc(21)
                }, 95);
                setTimeout(() => {
                    doNewSend(['5',
                        [secondary,
                            true
                            ]
                        ])
                }, 100);
                setTimeout(() => {
                    doNewSend(['5',
                        [secondary,
                            true
                            ]
                        ])
                }, 110);
                setTimeout(() => {
                    doNewSend(['5',
                        [secondary,
                            true
                            ]
                        ])
                }, 120);
                setTimeout(() => {
                    doNewSend(['5',
                        [secondary,
                            true
                            ]
                        ])
                }, 130);
                setTimeout(() => {
                    doNewSend(['5',
                        [secondary,
                            true
                            ]
                        ])
                }, 140);
                setTimeout(() => {
                    doNewSend(['5',
                        [secondary,
                            true
                            ]
                        ])
                }, 150);
                setTimeout(() => {
                    doNewSend(['5',
                        [secondary,
                            true
                            ]
                        ])
                }, 160);
                setTimeout(() => {
                    doNewSend(['5',
                        [secondary,
                            true
                            ]
                        ])
                }, 170);
                setTimeout(() => {
                    doNewSend(['5',
                        [secondary,
                            true
                            ]
                        ])
                }, 180);
                setTimeout(() => {
                    doNewSend(['5',
                        [secondary,
                            true
                            ]
                        ])
                }, 190);
                setTimeout(() => {
                    doNewSend(['5',
                        [secondary,
                            true
                            ]
                        ])
                }, 200);
                setTimeout(() => {
                    doNewSend(['5',
                        [primary,
                            true
                            ]
                        ]);
                    doNewSend(['7',
                        [
                            3]
                        ]);
                    hat(6);
                    acc(19);
                    autoaim =
                        false
                }, 210);
                setTimeout(() => {
                    doNewSend(['5',
                        [primary,
                            true
                            ]
                        ])
                }, 210);
                setTimeout(() => {
                    doNewSend(['5',
                        [primary,
                            true
                            ]
                        ])
                }, 220);
                setTimeout(() => {
                    doNewSend(['5',
                        [primary,
                            true
                            ]
                        ])
                }, 230);
                setTimeout(() => {
                    doNewSend(['5',
                        [secondary,
                            true
                            ]
                        ])
                }, 300);
                setTimeout(() => {
                    doNewSend(['5',
                        [primary,
                            true
                            ]
                        ])
                }, 1800);
                setTimeout(() => {
                    autoinsta =
                        true
                }, 2300)
            }
        } else {
            EnemyNear = false
        }
    };
    if (isEnemyNear == false &&
        autoaim == false) {
        normalAcc = 11;
        if (myPlayer['y'] < 2400) {
            normalHat = 15
        } else {
            if (myPlayer['y'] > 6850 &&
                myPlayer['y'] < 7550) {
                normalHat = 31
            } else {
                normalHat = 12
            }
        }
    };
    if (!nearestEnemy) {
        nearestEnemyAngle = myPlayer[
            'dir']
    };
    if (_0xa196x82[0] == '7' &&
        _0xa196x82[1] != myPlayer['id']
        ) {
        if (Antiweapon == true) {
            if (nearestEnemy[5] ==
                '5') {
                if (haveshield()) {
                    doNewSend(['5', [
                        secondary,
                        true
                        ]]);
                    doNewSend(['2', [
                        nearestEnemyAngle
                        ]]);
                    doNewSend(['ch', [
                        'Red Dragon - Anti Polearm'
                        ]])
                } else {
                    setTimeout(() => {
                            place(foodType,
                                null
                                );
                            place(foodType,
                                null
                                )
                        },
                        _0xa196x82[
                            2]);
                    doNewSend(['ch', [
                        'Red Dragon - Anti Polearm'
                        ]])
                }
            };
            if (nearestEnemy[5] ==
                '4') {
                if (haveshield()) {
                    doNewSend(['5', [
                        secondary,
                        true
                        ]]);
                    doNewSend(['2', [
                        nearestEnemyAngle
                        ]]);
                    doNewSend(['ch', [
                        'Red Dragon - Anti Katana'
                        ]])
                } else {
                    place(foodType,
                        null);
                    place(foodType,
                        null);
                    doNewSend(['ch', [
                        'Red Dragon - Anti Katana'
                        ]])
                }
            }
        }
    };
    if (_0xa196x82[0] == '18') {
        if (Antiweapon == true) {
            if (nearestEnemy[5] ==
                '15') {
                if (haveshield()) {
                    doNewSend(['5', [
                        secondary,
                        true
                        ]]);
                    doNewSend(['2', [
                        nearestEnemyAngle
                        ]]);
                    doNewSend(['ch', [
                        'Red Dragon - Anti Musket'
                        ]])
                } else {
                    Heal();
                    doNewSend(['ch', [
                        'Red Dragon - Anti Musket'
                        ]])
                }
            }
        };
        if (Antibow == true) {
            if (haveshield()) {
                doNewSend(['5', [
                    secondary,
                    true]]);
                doNewSend(['2', [
                    nearestEnemyAngle
                    ]]);
                doNewSend(['ch', [
                    'Red Dragon - Anti Bow'
                    ]])
            } else {
                Heal();
                doNewSend(['ch', [
                    'Red Dragon - Anti Bow'
                    ]])
            }
        }
    };
    if (_0xa196x83 == 'h' && _0xa196x82[
            1] == myPlayer['id']) {
        if (_0xa196x82[2] < number &&
            AIH == true) {
            Heal()
        }
    };
    if (_0xa196x83 == 'h' && _0xa196x82[
            1] == myPlayer['id']) {
        if (_0xa196x82[2] < 60 &&
            _0xa196x82[2] > 0 &&
            healToggle == 1) {
            place(foodType, null);
            place(foodType, null);
            setTimeout(() => {
                place(foodType,
                    null)
            }, 200)
        }
    };
    if (_0xa196x83 == 'h' && _0xa196x82[
            1] == myPlayer['id']) {
        if (_0xa196x82[2] < 66 &&
            _0xa196x82[2] > 0 &&
            healToggle == 1) {
            place(foodType);
            place(foodType)
        }
    };
    if (_0xa196x83 == 'h' && _0xa196x82[
            1] == myPlayer['id']) {
        if (_0xa196x82[2] < 94 &&
            _0xa196x82[2] > 0 &&
            healToggle == 1) {
            setTimeout(() => {
                place(foodType);
                place(foodType);
                place(foodType);
                place(foodType);
                place(foodType);
                place(foodType);
                place(foodType);
                place(foodType)
            }, 90)
        }
    };
    update()
}
var katanaheal = 0;
var antitoggle = 1;

function Heal() {
    fastheal = true;
    setTimeout(() => {
        fastheal = false;
        doNewSend(['ch', [
            'Anti Insta Speed : [' +
            number +
            ']']])
    }, 45)
}

function doNewSend(_0xa196x9d) {
    ws['send'](new Uint8Array(Array[
        'from'](msgpack5[
        'encode'](
        _0xa196x9d))))
}

function acc(_0xa196x9f) {
    doNewSend(['13c', [0, 0, 1]]);
    doNewSend(['13c', [0, _0xa196x9f,
        1]])
}

function hat(_0xa196x9f) {
    doNewSend(['13c', [0, _0xa196x9f,
        0]])
}

function haveshield() {
    let _0xa196xa2 = true;
    if (_0xa196xa2) {
        _0xa196xa2 = isElementVisible(
            document[
                'getElementById'](
                'actionBarItem11'))
    };
    return _0xa196xa2
}

function placeO(_0xa196x9f, _0xa196x91 =
    Math['atan2'](mouseY - height / 2,
        mouseX - width / 2)) {
    doNewSend(['5', [myPlayer['weapon'],
        true]]);
    doNewSend(['5', [_0xa196x9f,
    null]]);
    doNewSend(['c', [1, _0xa196x91]]);
    doNewSend(['c', [0, _0xa196x91]]);
    doNewSend(['5', [myPlayer['weapon'],
        true]])
}

function place(_0xa196x9f, _0xa196x91 =
    Math['atan2'](mouseY - height / 2,
        mouseX - width / 2)) {
    doNewSend(['5', [_0xa196x9f,
    null]]);
    doNewSend(['c', [1, _0xa196x91]]);
    doNewSend(['c', [0, _0xa196x91]]);
    doNewSend(['5', [myPlayer['weapon'],
        true]])
}

function boostmill() {
    if (boostDir == null) {
        boostDir = myPlayer['dir']
    };
    place(millType, boostDir + toRad(
        90));
    place(millType, boostDir - toRad(
        90));
    place(boostType, boostDir);
    doNewSend(['33', [boostDir]])
}

function boostSpike() {
    if (boostDir == null) {
        boostDir = nearestEnemyAngle
    };
    place(spikeType, boostDir + toRad(
        90));
    place(spikeType, boostDir - toRad(
        90));
    place(boostType, boostDir);
    doNewSend(['33', [boostDir]])
}

function insta() {
    autoaim = true;
    doNewSend(['13c', [0, 7, 0]]);
    doNewSend(['5', [primary, true]]);
    doNewSend(['13c', [0, 0, 1]]);
    acc(18);
    doNewSend(['c', [1]]);
    setTimeout(() => {
        doNewSend(['5', [
            secondary,
            true]]);
        doNewSend(['13c', [0,
            53, 0]]);
        doNewSend(['13c', [0, 0,
            1]]);
        acc(21)
    }, 105);
    setTimeout(() => {
        doNewSend(['5', [
            secondary,
            true]])
    }, 110);
    setTimeout(() => {
        doNewSend(['5', [
            secondary,
            true]])
    }, 115);
    setTimeout(() => {
        doNewSend(['5', [
            primary,
            true]]);
        doNewSend(['c', [0,
            null]]);
        doNewSend(['13c', [0, 0,
            0]]);
        doNewSend(['13c', [0, 0,
            1]]);
        hat(6);
        acc(21);
        autoaim = false
    }, 215)
}

function bowinsta() {
    lasthat = myPlayer['hat'];
    lastacc = myPlayer['accessory'];
    doNewSend(['5', [secondary, true]]);
    doNewSend(['c', [1]]);
    doNewSend(['2', [
        nearestEnemyAngle]]);
    doNewSend(['13c', [0, 53, 0]]);
    doNewSend(['13c', [0, 19, 1]]);
    setTimeout(() => {
        doNewSend(['6', [12]]);
        doNewSend(['2', [
            nearestEnemyAngle
            ]])
    }, 100);
    setTimeout(() => {
        doNewSend(['6', [15]]);
        doNewSend(['2', [
            nearestEnemyAngle
            ]])
    }, 200);
    setTimeout(() => {
        doNewSend(['c', [
        null]]);
        doNewSend(['5', [
            primary,
            true]]);
        hat(lasthat);
        acc(lastacc)
    }, 300);
    setTimeout(() => {
        doNewSend(['2', [null]])
    }, 310)
}
var repeater = function (_0xa196xaa,
    _0xa196xab, _0xa196xac,
    _0xa196xad) {
    let _0xa196xae = false;
    let _0xa196xaf = undefined;
    return {
        start: function (
        _0xa196xb0) {
            if (_0xa196xb0 ==
                _0xa196xaa &&
                document[
                    'activeElement'
                    ]['id'][
                    'toLowerCase'
                    ]() !==
                'chatbox') {
                _0xa196xae =
                    true;
                if (_0xa196xaf ===
                    undefined) {
                    _0xa196xaf =
                        setInterval(
                            () => {
                                _0xa196xab
                                    ();
                                if (!
                                    _0xa196xae
                                    ) {
                                    clearInterval
                                        (
                                            _0xa196xaf);
                                    _0xa196xaf
                                        =
                                        undefined;
                                    console
                                        [
                                            'log']
                                        (
                                            'claered')
                                }
                            },
                            _0xa196xac
                            )
                }
            }
        },
        stop: function (
        _0xa196xb0) {
            if (_0xa196xb0 ==
                _0xa196xaa &&
                document[
                    'activeElement'
                    ]['id'][
                    'toLowerCase'
                    ]() !==
                'chatbox') {
                _0xa196xae =
                    false
            }
        }
    }
};
const healer = repeater(81, () => {
    place(foodType)
}, 0);
const boostPlacer = repeater(70, () => {
    place(boostType)
}, 0);
const spikePlacer = repeater(86, () => {
    place(spikeType)
}, 0);
const millPlacer = repeater(17, () => {
    place(millType)
}, 0);
const turretPlacer = repeater(56,
() => {
    place(turretType)
}, 0);
const boostSpiker = repeater(71,
    boostSpike, 0);
const millboost = repeater(72,
    boostmill, 0);
document['addEventListener']('keydown',
    (_0xa196x33) => {
        spikePlacer['start'](
            _0xa196x33[
                'keyCode']);
        healer['start'](_0xa196x33[
            'keyCode']);
        boostPlacer['start'](
            _0xa196x33[
                'keyCode']);
        millboost['start'](
            _0xa196x33[
                'keyCode']);
        boostSpiker['start'](
            _0xa196x33[
                'keyCode']);
        millPlacer['start'](
            _0xa196x33[
                'keyCode']);
        turretPlacer['start'](
            _0xa196x33[
                'keyCode']);
        if (_0xa196x33['keyCode'] ==
            73 && document[
                'activeElement'][
                'id']['toLowerCase']
            () !== 'chatbox') {
            for (let _0xa196x87 =
                0; _0xa196x87 <
                4; _0xa196x87++) {
                let _0xa196x91 =
                    myPlayer[
                    'dir'] + toRad(
                        _0xa196x87 *
                        90);
                place(boostType,
                    _0xa196x91)
            }
        };
        if (_0xa196x33['keyCode'] ==
            56 && document[
                'activeElement'][
                'id']['toLowerCase']
            () !== 'chatbox') {
            place(turretType,
                myPlayer[
                'dir'] + toRad(
                    45));
            place(turretType,
                myPlayer[
                'dir'] - toRad(
                    45))
        };
        if (_0xa196x33['keyCode'] ==
            16 && document[
                'activeElement'][
                'id']['toLowerCase']
            () !== 'chatbox') {
            if (myPlayer['y'] <
                2400) {
                hat(15)
            } else {
                if (myPlayer['y'] >
                    6850 &&
                    myPlayer['y'] <
                    7550) {
                    hat(31)
                } else {
                    hat(12)
                }
            };
            acc(11)
        };
        if (_0xa196x33['keyCode'] ==
            192 && document[
                'activeElement'][
                'id']['toLowerCase']
            () !== 'chatbox') {
            setTimeout(() => {
                doNewSend(['ch',
                    [
                        '!insta']
                    ])
            }, 500)
        };
        if (_0xa196x33['keyCode'] ==
            190 && document[
                'activeElement'][
                'id']['toLowerCase']
            () !== 'chatbox') {
            setTimeout(() => {
                doNewSend(['ch',
                    [
                        '!bow']
                    ])
            }, 500)
        };
        if (_0xa196x33['keyCode'] ==
            187 && document[
                'activeElement'][
                'id']['toLowerCase']
            () !== 'chatbox') {
            doNewSend(['5', [
                'constructor',
                true]])
        };
        if (_0xa196x33['keyCode'] ==
            85 && document[
                'activeElement'][
                'id']['toLowerCase']
            () !== 'chatbox') {
            var _0xa196xb8 =
                myPlayer['hat'];
            var _0xa196xb9 =
                myPlayer[
                    'accessory'];
            autoaim = true;
            doNewSend(['5', [
                primary,
                true]]);
            doNewSend(['13c', [0, 7,
                0]]);
            doNewSend(['13c', [0, 0,
                1]]);
            doNewSend(['7', [3]]);
            setTimeout(() => {
                doNewSend(['6',
                    [
                        5]
                    ]);
                doNewSend(['6',
                    [
                        17]
                    ]);
                doNewSend(['6',
                    [
                        31]
                    ]);
                doNewSend(['6',
                    [
                        23]
                    ]);
                doNewSend(['6',
                    [
                        9]
                    ]);
                doNewSend(['6',
                    [
                        33]
                    ])
            }, 100);
            setTimeout(() => {
                doNewSend(['6',
                    [
                        4]
                    ])
            }, 200);
            setTimeout(() => {
                doNewSend(['5',
                    [secondary,
                        true
                        ]
                    ]);
                doNewSend(['13c',
                    [0, 53,
                        0
                        ]
                    ])
            }, 300);
            setTimeout(() => {
                doNewSend(['6',
                    [
                        15]
                    ])
            }, 420);
            setTimeout(() => {
                doNewSend(['7',
                    [
                        3]
                    ]);
                doNewSend(['5',
                    [primary,
                        true
                        ]
                    ]);
                doNewSend(['13c',
                    [0, _0xa196xb8,
                        0
                        ]
                    ]);
                doNewSend(['13c',
                    [0, _0xa196xb9,
                        1
                        ]
                    ])
            }, 500)
        };
        if (_0xa196x33['keyCode'] ==
            78 && document[
                'activeElement'][
                'id']['toLowerCase']
            () !== 'chatbox') {
            place(millType,
                myPlayer[
                'dir'] + toRad(
                    9000000455));
            place(millType,
                myPlayer[
                'dir'] - toRad(
                    9000000455));
            place(millType,
                myPlayer[
                'dir'] + toRad(
                    9000000365));
            place(millType,
                myPlayer[
                'dir'] + toRad(
                    9000000365))
        };
        if (_0xa196x33['keyCode'] ==
            32 && document[
                'activeElement'][
                'id']['toLowerCase']
            () !== 'chatbox') {
            autoaim = true;
            doNewSend(['5', [
                primary,
                true]]);
            doNewSend(['13c', [0, 7,
                0]]);
            doNewSend(['13c', [0, 0,
                1]]);
            doNewSend(['13c', [0,
                19, 1]]);
            place(spikeType,
                myPlayer[
                'dir'] + toRad(
                    45));
            place(spikeType,
                myPlayer[
                'dir'] - toRad(
                    45));
            doNewSend(['c', [1]]);
            setTimeout(() => {
                doNewSend(['c',
                    [0,
                        null]
                    ]);
                doNewSend(['13c',
                    [0, 6,
                        0
                        ]
                    ]);
                autoaim =
                    false
            }, 200)
        };
        if (_0xa196x33['keyCode'] ==
            48 && document[
                'activeElement'][
                'id']['toLowerCase']
            () !== 'chatbox') {
            doNewSend(['ch', [
                'Red Dragon - Invis Weapon'
                ]]);
            doNewSend(['5', [
                'length',
                !0]])
        };
        if (_0xa196x33['keyCode'] ==
            188 && document[
                'activeElement'][
                'id']['toLowerCase']
            () !== 'chatbox') {
            autoaim = true;
            doNewSend(['13c', [0, 0,
                1]]);
            doNewSend(['13c', [0,
                19, 1]]);
            doNewSend(['c', [1]]);
            doNewSend(['5', [
                primary,
                true]]);
            doNewSend(['13c', [0, 7,
                0]]);
            setTimeout(() => {
                doNewSend(['13c',
                    [0, 53,
                        0
                        ]
                    ]);
                doNewSend(['5',
                    [secondary,
                        true
                        ]
                    ])
            }, 98);
            setTimeout(() => {
                doNewSend(['13c',
                    [0, 7,
                        0
                        ]
                    ]);
                doNewSend(['13c',
                    [0, 19,
                        1
                        ]
                    ]);
                doNewSend(['5',
                    [primary,
                        true
                        ]
                    ]);
                doNewSend(['c',
                    [
                        null]
                    ]);
                autoaim =
                    false
            }, 190)
        };
        if (_0xa196x33['keyCode'] ==
            82 && document[
                'activeElement'][
                'id']['toLowerCase']
            () !== 'chatbox') {
            if (nolaginsta == 1) {
                autoaim = true;
                doNewSend(['5', [
                    primary,
                    true
                    ]]);
                doNewSend(['13c', [
                    0,
                    7, 0
                    ]]);
                doNewSend(['13c', [
                    0,
                    0, 1
                    ]]);
                doNewSend(['c', [
                    1]]);
                setTimeout(() => {
                    var _0xa196xba =
                        '';
                    doNewSend
                        (['13c', [0, 53,
                            0
                            ]]);
                    doNewSend
                        (['5', [secondary,
                            true
                            ]]);
                    for (let _0xa196x87 =
                            0; _0xa196x87 <
                        265; _0xa196x87++
                        ) {
                        let _0xa196xbb =
                            new Uint8Array(
                                225
                                );
                        for (
                            let _0xa196x87 =
                                0; _0xa196x87 <
                            _0xa196xbb[
                                'length'
                                ]; _0xa196x87++
                            ) {
                            _0xa196xbb
                                [
                                    _0xa196x87] =
                                Math[
                                    'floor'
                                    ]
                                (Math[
                                        'random']
                                    () *
                                    308
                                    );
                            _0xa196xba
                                +=
                                _0xa196xbb[
                                    _0xa196x87
                                    ]
                        }
                    };
                    ws['send']
                        (
                            _0xa196xbb)
                }, 110);
                setTimeout(() => {
                    doNewSend
                        (['13c', [0, 0,
                            0
                            ]])
                }, 80);
                setTimeout(() => {
                    doNewSend
                        (['5', [primary,
                            true
                            ]]);
                    doNewSend
                        (['c', [0,
                            null]]);
                    doNewSend
                        (['13c', [0, 6,
                            0
                            ]]);
                    autoaim
                        =
                        false
                }, 245)
            };
            if (_0xa196x33[
                    'keyCode'] ==
                48 && document[
                    'activeElement']
                ['id'][
                    'toLowerCase']
            () !== 'chatbox') {
                doNewSend(['5', [
                    length,
                    !0]])
            };
            if (LegendaryInsta ==
                1) {
                autoaim = true;
                doNewSend(['13c', [
                    0,
                    7, 0
                    ]]);
                doNewSend(['5', [
                    primary,
                    true
                    ]]);
                doNewSend(['13c', [
                    0,
                    0, 1
                    ]]);
                acc(18);
                doNewSend(['c', [
                    1]]);
                setTimeout(() => {
                    doNewSend
                        (['5', [secondary,
                            true
                            ]]);
                    doNewSend
                        (['13c', [0, 53,
                            0
                            ]]);
                    doNewSend
                        (['13c', [0, 0,
                            1
                            ]]);
                    acc(21)
                }, 105);
                setTimeout(() => {
                    doNewSend
                        (['5', [secondary,
                            true
                            ]])
                }, 110);
                setTimeout(() => {
                    doNewSend
                        (['5', [secondary,
                            true
                            ]])
                }, 115);
                setTimeout(() => {
                    doNewSend
                        (['5', [primary,
                            true
                            ]]);
                    doNewSend
                        (['c', [0,
                            null]]);
                    doNewSend
                        (['13c', [0, 0,
                            0
                            ]]);
                    doNewSend
                        (['13c', [0, 0,
                            1
                            ]]);
                    hat(6);
                    acc(21);
                    autoaim
                        =
                        false
                }, 215)
            };
            if (RenizInsta == 1) {
                autoaim = true;
                doNewSend(['5', [
                    primary,
                    true
                    ]]);
                doNewSend(['13c', [
                    0,
                    0, 1
                    ]]);
                doNewSend(['13c', [
                    0,
                    18,
                    1]]);
                doNewSend(['13c', [
                    0,
                    18,
                    1]]);
                doNewSend(['13c', [
                    0,
                    7, 0
                    ]]);
                doNewSend(['13c', [
                    0,
                    7, 0
                    ]]);
                doNewSend(['c', [
                    1]]);
                setTimeout(() => {
                    doNewSend
                        (['5', [secondary,
                            true
                            ]]);
                    doNewSend
                        (['13c', [0, 19,
                            1
                            ]]);
                    doNewSend
                        (['13c', [0, 19,
                            1
                            ]]);
                    doNewSend
                        (['13c', [0, 53,
                            0
                            ]]);
                    doNewSend
                        (['13c', [0, 21,
                            1
                            ]]);
                    doNewSend
                        (['13c', [0, 21,
                            1
                            ]]);
                    doNewSend
                        (['c', [
                            1]])
                }, 100);
                setTimeout(() => {
                    doNewSend
                        (['5', [primary,
                            true
                            ]]);
                    doNewSend
                        (['c', [0,
                            null]]);
                    doNewSend
                        (['13c', [0, 0,
                            0
                            ]]);
                    doNewSend
                        (['13c', [0, 6,
                            0
                            ]]);
                    doNewSend
                        (['13c', [0, 0,
                            1
                            ]]);
                    autoaim
                        =
                        false
                }, 250)
            };
            if (LagInsta == 1) {
                autoaim = true;
                doNewSend(['5', [
                    primary,
                    true
                    ]]);
                doNewSend(['13c', [
                    0,
                    7, 0
                    ]]);
                doNewSend(['13c', [
                    0,
                    0, 1
                    ]]);
                doNewSend(['13c', [
                    0,
                    18,
                    1]]);
                doNewSend(['c', [
                    1]]);
                setTimeout(() => {
                    var _0xa196xba =
                        '';
                    doNewSend
                        (['13c', [0, 53,
                            0
                            ]]);
                    doNewSend
                        (['13c', [0, 21,
                            1
                            ]]);
                    doNewSend
                        (['5', [secondary,
                            true
                            ]]);
                    for (let _0xa196x87 =
                            0; _0xa196x87 <
                        850; _0xa196x87++
                        ) {
                        let _0xa196xbb =
                            new Uint8Array(
                                550
                                );
                        for (
                            let _0xa196x87 =
                                0; _0xa196x87 <
                            _0xa196xbb[
                                'length'
                                ]; _0xa196x87++
                            ) {
                            _0xa196xbb
                                [
                                    _0xa196x87] =
                                Math[
                                    'floor'
                                    ]
                                (Math[
                                        'random']
                                    () *
                                    278
                                    );
                            _0xa196xba
                                +=
                                _0xa196xbb[
                                    _0xa196x87
                                    ]
                        }
                    };
                    ws['send']
                        (
                            _0xa196xbb)
                }, 110);
                setTimeout(() => {
                    doNewSend
                        (['5', [primary,
                            true
                            ]]);
                    doNewSend
                        (['c', [0,
                            null]]);
                    doNewSend
                        (['13c', [0, 6,
                            0
                            ]]);
                    doNewSend
                        (['13c', [0, 0,
                            1
                            ]]);
                    doNewSend
                        (['13c', [0, 19,
                            1
                            ]]);
                    autoaim
                        =
                        false
                }, 230)
            };
            if (ReverseLagInsta ==
                1) {
                autoaim = true;
                doNewSend(['5', [
                    secondary,
                    true
                    ]]);
                doNewSend(['13c', [
                    0,
                    53,
                    0]]);
                doNewSend(['13c', [
                    0,
                    0, 1
                    ]]);
                doNewSend(['13c', [
                    0,
                    19,
                    1]]);
                doNewSend(['c', [
                    1]]);
                setTimeout(() => {
                        doNewSend
                            (['5', [primary,
                                true
                                ]]);
                        doNewSend
                            (['13c', [0, 7,
                                0
                                ]]);
                        doNewSend
                            (['13c', [0, 0,
                                1
                                ]]);
                        doNewSend
                            (['13c', [0, 18,
                                1
                                ]])
                    },
                    instaSpeed -
                    130);
                setTimeout(() => {
                    var _0xa196xba =
                        '';
                    for (let _0xa196x87 =
                            0; _0xa196x87 <
                        750; _0xa196x87++
                        ) {
                        let _0xa196xbb =
                            new Uint8Array(
                                550
                                );
                        for (
                            let _0xa196x87 =
                                0; _0xa196x87 <
                            _0xa196xbb[
                                'length'
                                ]; _0xa196x87++
                            ) {
                            _0xa196xbb
                                [
                                    _0xa196x87] =
                                Math[
                                    'floor'
                                    ]
                                (Math[
                                        'random']
                                    () *
                                    278
                                    );
                            _0xa196xba
                                +=
                                _0xa196xbb[
                                    _0xa196x87
                                    ]
                        }
                    };
                    ws['send']
                        (
                            _0xa196xbb)
                }, 110);
                setTimeout(() => {
                    doNewSend
                        (['5', [primary,
                            true
                            ]]);
                    doNewSend
                        (['c', [0,
                            null]]);
                    doNewSend
                        (['13c', [0, 6,
                            0
                            ]]);
                    doNewSend
                        (['13c', [0, 0,
                            1
                            ]]);
                    doNewSend
                        (['13c', [0, 21,
                            1
                            ]]);
                    autoaim
                        =
                        false
                }, 200)
            };
            setTimeout(() => {
                doNewSend(['5',
                    [secondary,
                        true
                        ]
                    ]);
                setTimeout(
                    () => {
                        doNewSend
                            (['5', [primary,
                                true
                                ]])
                    },
                    1500
                    )
            }, 1200)
        };
        if (_0xa196x33['keyCode'] ==
            76 && document[
                'activeElement'][
                'id']['toLowerCase']
            () !== 'chatbox') {
            lasthat = myPlayer[
                'hat'];
            lastacc = myPlayer[
                'accessory'];
            doNewSend(['5', [
                secondary,
                true]]);
            doNewSend(['c', [1]]);
            doNewSend(['2', [
                nearestEnemyAngle
                ]]);
            doNewSend(['13c', [0,
                53, 0]]);
            doNewSend(['13c', [0,
                19, 1]]);
            setTimeout(() => {
                doNewSend(['6',
                    [
                        12]
                    ]);
                doNewSend(['2',
                    [
                        nearestEnemyAngle]
                    ])
            }, 100);
            setTimeout(() => {
                doNewSend(['6',
                    [
                        15]
                    ]);
                doNewSend(['2',
                    [
                        nearestEnemyAngle]
                    ])
            }, 200);
            setTimeout(() => {
                doNewSend(['c',
                    [
                        null]
                    ]);
                doNewSend(['5',
                    [primary,
                        true
                        ]
                    ]);
                hat(
                lasthat);
                acc(lastacc)
            }, 300);
            setTimeout(() => {
                doNewSend(['2',
                    [
                        null]
                    ])
            }, 310);
            setTimeout(() => {
                lasthat =
                    myPlayer[
                        'hat'
                        ];
                lastacc =
                    myPlayer[
                        'accessory'
                        ];
                doNewSend(['5',
                    [secondary,
                        true
                        ]
                    ]);
                doNewSend(['c',
                    [
                        1]
                    ]);
                doNewSend(['2',
                    [
                        nearestEnemyAngle]
                    ]);
                doNewSend(['13c',
                    [0, 53,
                        0
                        ]
                    ]);
                doNewSend(['13c',
                    [0, 19,
                        1
                        ]
                    ])
            }, 0);
            setTimeout(() => {
                doNewSend(['6',
                    [
                        12]
                    ]);
                doNewSend(['2',
                    [
                        nearestEnemyAngle]
                    ])
            }, 100);
            setTimeout(() => {
                doNewSend(['6',
                    [
                        15]
                    ]);
                doNewSend(['2',
                    [
                        nearestEnemyAngle]
                    ])
            }, 200);
            setTimeout(() => {
                doNewSend(['c',
                    [
                        null]
                    ]);
                doNewSend(['5',
                    [primary,
                        true
                        ]
                    ]);
                hat(
                lasthat);
                acc(lastacc)
            }, 300);
            setTimeout(() => {
                doNewSend(['2',
                    [
                        null]
                    ])
            }, 310)
        };
        if (_0xa196x33['keyCode'] ==
            191 && document[
                'activeElement'][
                'id']['toLowerCase']
            () !== 'chatbox') {
            doNewSend(['ch', [
                'Teleport: On'
                ]]);
            for (let _0xa196x87 =
                0; _0xa196x87 <
                4; _0xa196x87++) {
                let _0xa196x91 =
                    myPlayer[
                    'dir'] + toRad(
                        _0xa196x87 *
                        90);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91);
                place(millType,
                    _0xa196x91)
            }
        }
    });
document['addEventListener']('keyup', (
    _0xa196x33) => {
    spikePlacer['stop'](
        _0xa196x33[
            'keyCode']);
    boostPlacer['stop'](
        _0xa196x33[
            'keyCode']);
    millboost['stop'](
        _0xa196x33[
            'keyCode']);
    boostSpiker['stop'](
        _0xa196x33[
            'keyCode']);
    millPlacer['stop'](
        _0xa196x33[
            'keyCode']);
    turretPlacer['stop'](
        _0xa196x33[
            'keyCode']);
    healer['stop'](_0xa196x33[
        'keyCode']);
    if (_0xa196x33['keyCode'] ==
        71 && document[
            'activeElement'][
            'id']['toLowerCase']
        () !== 'chatbox') {
        setTimeout(() => {
            doNewSend(['33',
                [
                    null]
                ]);
            boostDir =
                null
        }, 10)
    }
});

function isElementVisible(_0xa196x33) {
    return (_0xa196x33[
        'offsetParent'] !== null)
}

function toRad(_0xa196x91) {
    return _0xa196x91 * 0.01745329251
}

function dist(a, _0xa196x98) {
    return Math['sqrt'](Math['pow']((
        _0xa196x98['y'] - a[
            2]), 2) + Math[
        'pow']((_0xa196x98[
        'x'] - a[1]), 2))
}
document['title'] = 'Red Dragon';

function update() {
    for (let _0xa196x87 =
        0; _0xa196x87 < 9; _0xa196x87++
        ) {
        if (isElementVisible(document[
                'getElementById'](
                'actionBarItem' +
                _0xa196x87
                .toString()))) {
            primary = _0xa196x87
        }
    };
    for (let _0xa196x87 =
        9; _0xa196x87 < 16; _0xa196x87++
        ) {
        if (isElementVisible(document[
                'getElementById'](
                'actionBarItem' +
                _0xa196x87
                .toString()))) {
            secondary = _0xa196x87
        }
    };
    for (let _0xa196x87 =
        16; _0xa196x87 <
        19; _0xa196x87++) {
        if (isElementVisible(document[
                'getElementById'](
                'actionBarItem' +
                _0xa196x87
                .toString()))) {
            foodType = _0xa196x87 - 16
        }
    };
    for (let _0xa196x87 =
        19; _0xa196x87 <
        22; _0xa196x87++) {
        if (isElementVisible(document[
                'getElementById'](
                'actionBarItem' +
                _0xa196x87
                .toString()))) {
            wallType = _0xa196x87 - 16
        }
    };
    for (let _0xa196x87 =
        22; _0xa196x87 <
        26; _0xa196x87++) {
        if (isElementVisible(document[
                'getElementById'](
                'actionBarItem' +
                _0xa196x87
                .toString()))) {
            spikeType = _0xa196x87 - 16
        }
    };
    for (let _0xa196x87 =
        26; _0xa196x87 <
        29; _0xa196x87++) {
        if (isElementVisible(document[
                'getElementById'](
                'actionBarItem' +
                _0xa196x87
                .toString()))) {
            millType = _0xa196x87 - 16
        }
    };
    for (let _0xa196x87 =
        29; _0xa196x87 <
        31; _0xa196x87++) {
        if (isElementVisible(document[
                'getElementById'](
                'actionBarItem' +
                _0xa196x87
                .toString()))) {
            mineType = _0xa196x87 - 16
        }
    };
    for (let _0xa196x87 =
        31; _0xa196x87 <
        33; _0xa196x87++) {
        if (isElementVisible(document[
                'getElementById'](
                'actionBarItem' +
                _0xa196x87
                .toString()))) {
            boostType = _0xa196x87 - 16
        }
    };
    for (let _0xa196x87 =
        33; _0xa196x87 <
        39; _0xa196x87++) {
        if (isElementVisible(document[
                'getElementById'](
                'actionBarItem' +
                _0xa196x87
                .toString())) &&
            _0xa196x87 != 36) {
            turretType = _0xa196x87 - 16
        }
    };
    spawnpadType = 36
}
var ID_WinterCap = 15;
var ID_FlipperHat = 31;
var ID_MarksmanCap = 1;
var ID_BushGear = 10;
var ID_SoldierHelmet = 6;
var ID_AntiVenomGear = 23;
var ID_MusketeerHat = 32;
var ID_MedicGear = 13;
var ID_BullHelmet = 7;
var ID_EmpHelmet = 22;
var ID_BoosterHat = 12;
var ID_BarbarianArmor = 26;
var ID_BullMask = 46;
var ID_WindmillHat = 14;
var ID_SpikeGear = 11;
var ID_BushidoArmor = 16;
var ID_SamuraiArmor = 20;
var ID_ScavengerGear = 27;
var ID_TankGear = 40;
var ID_TurretGear = 53;
var TankGearKey = 90;
var BullHelmetKey = 74;
var SoldierHelmetKey = 67;
var TurretKey = 75;
var uneqiup = 16;
var BoosterHatKey = 66;
var SpikeGearKey = 89;
var EmpKey = 84;
var SamuKey = 50;
var SpikeKey = 86;
var dab = 0;
try {
    document['getElementById'](
        'moomooio_728x90_home')[
        'style']['display'] = 'none';
    $('moomooio728x90_home')['parent']
    ()['css']({
            display: 'none'
        })
} catch (e) {
    console['log'](
        'There was an error removing the ads.'
        )
};
var menuChange = document[
    'createElement']('div');
menuChange['className'] = 'menuCard';
menuChange['id'] = 'mainSettings';
menuChange['innerHTML'] =
    `${'\x0D\x0A<div id="simpleModal" class="modal">\x0D\x0A<div class="modal-content">\x0D\x0A<div class="modal-header">\x0D\x0A<span class="closeBtn">&times;</span>\x0D\x0A<h2 style="font-size: 17px;">Red Dragon - Mod</h2>\x0D\x0A</div>\x0D\x0A<div class="modal-body" style="font-size: 17px;">\x0D\x0A<div class="flexControl">\x0D\x0A<br><h3 class="menuPrompt">Tank Gear: </h3> <input value="'}${String['fromCharCode'](TankGearKey)}${'" id="tankGear" class="keyPressLow" onkeyup="this.value = this.value.toUpperCase();" maxlength="1" type="text"/>\x0D\x0A<h3 class="menuPrompt">Bull Helmet: </h3> <input value="'}${String['fromCharCode'](BullHelmetKey)}${'" id="bullHelm" class="keyPressLow" onkeyup="this.value = this.value.toUpperCase();" maxlength="1" type="text"/><br>\x0D\x0A<h3 class="menuPrompt">Soldier Helmet: </h3> <input value="'}${String['fromCharCode'](SoldierHelmetKey)}${'" id="soldier" class="keyPressLow"onkeyup="this.value = this.value.toUpperCase();"  maxlength="1" type="text"/>\x0D\x0A<h3 class="menuPrompt">Turret Gear: </h3> <input value="'}${String['fromCharCode'](TurretKey)}${'" id="turret" class="keyPressLow" maxlength="1" onkeyup="this.value = this.value.toUpperCase();" type="text"/><br>\x0D\x0A<br><h3 class="menuPrompt">Booster Hat: </h3> <input value="'}${String['fromCharCode'](BoosterHatKey)}${'" id="booster" class="keyPressLow" maxlength="1" onkeyup="this.value = this.value.toUpperCase();" type="text"/>\x0D\x0A<h3 class="menuPrompt">Spike Gear: </h3> <input value="'}${String['fromCharCode'](SpikeGearKey)}${'" id="spikeg" class="keyPressLow" maxlength="1" onkeyup="this.value = this.value.toUpperCase();" type="text"/><br>\x0D\x0A<br><h3 class="menuPrompt">Emp Helmet: </h3> <input value="'}${String['fromCharCode'](EmpKey)}${'" id="emp" class="keyPressLow" onkeyup="this.value = this.value.toUpperCase();" maxlength="1" type="text"/>\x0D\x0A<h3 class="menuPrompt">Samurai Armor:</h3> <input value="'}${String['fromCharCode'](SamuKey)}${'" id="samu" class="keyPressLow" onkeyup="this.value = this.value.toUpperCase();" maxlength="1" type="text"/><br>\x0D\x0A<h3 style="font-size: 17px;"style="font-size: 21px;"> Settings </h3>\x0D\x0A<label class="container"style="font-size: 17px;">Clear Map\x0D\x0A<input type="checkbox" id="myCheck">\x0D\x0A<span class="checkmark"></span>\x0D\x0A</label>\x0D\x0A<label class="container"style="font-size: 17px;">Auto Meelee Hats\x0D\x0A<input type="checkbox" id="m">\x0D\x0A<span class="checkmark"></span>\x0D\x0A</label>\x0D\x0A</label>\x0D\x0A<label class="container"style="font-size: 17px;">B+W Wings\x0D\x0A<input type="checkbox" id="n">\x0D\x0A<span class="checkmark"></span>\x0D\x0A</label>\x0D\x0A<br><label class="container"style="font-size: 17px;">Autoheal Toggle\x0D\x0A<input type="checkbox" id="aht">\x0D\x0A<span class="checkmark"></span>\x0D\x0A</label>\x0D\x0A<br><label class="container"style="font-size: 17px;">Autohat Toggle\x0D\x0A<input type="checkbox" id="auhat">\x0D\x0A<span class="checkmark"></span>\x0D\x0A</label>\x0D\x0A<br><label class="container"style="font-size: 17px;">Auto Q Hold\x0D\x0A<input type="checkbox" id="Super">\x0D\x0A<span class="checkmark"></span>\x0D\x0A<br><h3 style="font-size: 17px;"style="font-size: 21px;"> Insta Settings </h3>\x0D\x0A</label>\x0D\x0A<br><label class="container">Red Dragon - Lag Insta\x0D\x0A<input type="checkbox" id="LI">\x0D\x0A<span class="checkmark"></span>\x0D\x0A</label>\x0D\x0A<br><label class="container">Red Dragon - Reverse Lag Insta\x0D\x0A<input type="checkbox" id="RLI">\x0D\x0A<span class="checkmark"></span>\x0D\x0A</label>\x0D\x0A<br><label class="container">Red Dragon - Normal Insta\x0D\x0A<input type="checkbox" id="RI">\x0D\x0A<span class="checkmark"></span>\x0D\x0A</label>\x0D\x0A<br><label class="container">Red Dragon - Katana Insta\x0D\x0A<input type="checkbox" id="LegendaryInsta">\x0D\x0A<span class="checkmark"></span>\x0D\x0A</label>\x0D\x0A<br><label class="container">Red Dragon - Stacked Insta\x0D\x0A<input type="checkbox" id="NLI">\x0D\x0A<span class="checkmark"></span>\x0D\x0A<br></label>\x0D\x0A<label class="container"style="font-size: 17px;">Anti Insta Speed\x0D\x0A<input type="checkbox" id="AIH">\x0D\x0A<span class="checkmark"></span>\x0D\x0A</label>\x0D\x0A<br>\x0D\x0AAnti Heal Speed<input class="coolinpit" value="'}${number}${'" type="number" id="hpq">\x0D\x0A<br>\x0D\x0A<label class="container"style="font-size: 17px;">Red Dragon - Anti Weapons\x0D\x0A<input type="checkbox" id="AI">\x0D\x0A<span class="checkmark"></span>\x0D\x0A</label>\x0D\x0A<br>\x0D\x0A<label class="container"style="font-size: 17px;">Anti Bow\x0D\x0A<input type="checkbox" id="AB">\x0D\x0A<span class="checkmark"></span>\x0D\x0A</label>\x0D\x0A<br>\x0D\x0A<label class="container"style="font-size: 17px;">Auto Aim\x0D\x0A<input type="checkbox" id="AA">\x0D\x0A<span class="checkmark"></span>\x0D\x0A</label>\x0D\x0A<br>\x0D\x0A<label class="container"style="font-size: 17px;">Range Insta\x0D\x0A<input type="checkbox" id="Rgi">\x0D\x0A<span class="checkmark"></span>\x0D\x0A</label>\x0D\x0A<br>\x0D\x0A<label class="container"style="font-size: 17px;">Auto Tank On Trap\x0D\x0A<input type="checkbox" id="abt">\x0D\x0A<span class="checkmark"></span>\x0D\x0A</label>\x0D\x0A<label class="container"style="font-size: 17px;">Plague Toggle\x0D\x0A<input type="checkbox" id="plaguetoggle">\x0D\x0A\x0D\x0A<span class="checkmark"></span>\x0D\x0A<label class="container"style="font-size: 17px;">Cps Booster (might cause lag)\x0D\x0A<input type="checkbox" id="cps">\x0D\x0A</label>\x0D\x0A<label class="container"style="font-size: 17px;">Anti Insta\x0D\x0A<input type="checkbox" id="anti">\x0D\x0A<span class="checkmark"></span>\x0D\x0A</label>\x0D\x0A<br>\x0D\x0A<label class="container"style="font-size: 17px;">katana heal\x0D\x0A<input type="checkbox" id="katana">\x0D\x0A<span class="checkmark"></span>\x0D\x0A</label>\x0D\x0A<br>\x0D\x0A<h3 style="font-size: 17px;"> Autochat settings </h3>\x0D\x0A<br>AutoChat:<input type="text" value="1" id="ach1" width="100" height="50"/><br>\x0D\x0A</div>\x0D\x0A</div>\x0D\x0A<div class="modal-footer">\x0D\x0A<h3 style="font-size: 17px;">Red Dragon</h3>\x0D\x0A<p>Red Dragon</p>\x0D\x0A</div>\x0D\x0A</div>\x0D\x0A</div>\x0D\x0A'}`;
document['body']['appendChild'](
    menuChange);
$('#tankGear')['on']('input', () => {
    var _0xa196xe0 = $(
        '#tankGear')['val']
    ();
    if (_0xa196xe0) {
        TankGearKey =
            _0xa196xe0[
                'toUpperCase']
        ();
        TankGearKey =
            TankGearKey[
                'charCodeAt'](
            0);
        console['log'](
            TankGearKey)
    }
});
$('#bullHelm')['on']('input', () => {
    var _0xa196xe0 = $(
        '#bullHelm')['val']
    ();
    if (_0xa196xe0) {
        BullHelmetKey =
            _0xa196xe0[
                'toUpperCase']
        ();
        BullHelmetKey =
            BullHelmetKey[
                'charCodeAt'](
            0);
        console['log'](
            BullHelmetKey)
    }
});
$('#soldier')['on']('input', () => {
    var _0xa196xe0 = $(
        '#soldier')['val']();
    if (_0xa196xe0) {
        SoldierHelmetKey =
            _0xa196xe0[
                'toUpperCase']
        ();
        SoldierHelmetKey =
            SoldierHelmetKey[
                'charCodeAt'](
            0);
        console['log'](
            SoldierHelmetKey
            )
    }
});
$('#turret')['on']('input', () => {
    var _0xa196xe0 = $(
        '#turret')['val']();
    if (_0xa196xe0) {
        TurretKey = _0xa196xe0[
            'toUpperCase']();
        TurretKey = TurretKey[
            'charCodeAt'](0);
        console['log'](
            TurretKey)
    }
});
$('#emp')['on']('input', () => {
    var _0xa196xe0 = $('#emp')[
        'val']();
    if (_0xa196xe0) {
        EmpKey = _0xa196xe0[
            'toUpperCase']();
        EmpKey = EmpKey[
            'charCodeAt'](0);
        console['log'](EmpKey)
    }
});
$('#samu')['on']('input', () => {
    var _0xa196xe0 = $('#samu')[
        'val']();
    if (_0xa196xe0) {
        SamuKey = _0xa196xe0[
            'toUpperCase']();
        SamuKey = SamuKey[
            'charCodeAt'](0);
        console['log'](SamuKey)
    }
});
var styleItem = document[
    'createElement']('style');
styleItem['type'] = 'text/css';
styleItem['appendChild'](document[
    'createTextNode'](
    `${'\x0D\x0A.keyPressLow {\x0D\x0A    margin-left: 8px;\x0D\x0A    font-size: 16px;\x0D\x0A    margin-right: 8px;\x0D\x0A    height: 25px;\x0D\x0A    width: 45px;\x0D\x0A    background-color: #e6e0d4;\x0D\x0A    border-radius: 3.5px;\x0D\x0A    border: none;\x0D\x0A    text-align: center;\x0D\x0A    color: #FF0000;\x0D\x0A    border: 0.5px solid #e6e0d4;\x0D\x0A}\x0D\x0A.menuPrompt {\x0D\x0A    font-size: 18px;\x0D\x0A    font-family: \'\xF0\u0178\xA5\xB3\';\x0D\x0A    color: #e6e0d4;\x0D\x0A    flex: 0.2;\x0D\x0A    text-align: center;\x0D\x0A    margin-top: 10px;\x0D\x0A    display: inline-block;\x0D\x0A}\x0D\x0A\x0D\x0A.modal {\x0D\x0A    display: none;\x0D\x0A    position: fixed;\x0D\x0A    z-index: 1;\x0D\x0A    left: 0;\x0D\x0A    top: 0;\x0D\x0A    overflow: auto;\x0D\x0A    height: 100%;\x0D\x0A    width: 100%;\x0D\x0A}\x0D\x0A\x0D\x0A.modal-content {\x0D\x0A    margin: 10% auto;\x0D\x0A    width: 50%;\x0D\x0A    box-shadow: 0 5px 8px 0 rgba(0, 0, 0, 0.2), 0 7px 20px 0 rgba(0, 0, 0, 0.17);\x0D\x0A    font-size: 14px;\x0D\x0A    line-height: 1.6;\x0D\x0A}\x0D\x0A\x0D\x0A.modal-header h2,\x0D\x0A.modal-footer h3 {\x0D\x0A  margin: 0;\x0D\x0A}\x0D\x0A\x0D\x0A.modal-header {\x0D\x0A    background: #FF0000;\x0D\x0A    padding: 15px;\x0D\x0A    color: #fff;\x0D\x0A    border-top-left-radius: 5px;\x0D\x0A    border-top-right-radius: 5px;\x0D\x0A}\x0D\x0A\x0D\x0A.modal-body {\x0D\x0A    padding: 10px 20px;\x0D\x0A    background: #fff00;\x0D\x0A}\x0D\x0A\x0D\x0A.modal-footer {\x0D\x0A    background: #FF0000;\x0D\x0A    padding: 10px;\x0D\x0A    color: #e6e0d4;\x0D\x0A    text-align: center;\x0D\x0A    border-bottom-left-radius: 5px;\x0D\x0A    border-bottom-right-radius: 5px;\x0D\x0A}\x0D\x0A\x0D\x0A.closeBtn {\x0D\x0A    color: #ccc;\x0D\x0A    float: right;\x0D\x0A    font-size: 30px;\x0D\x0A    color: #fff;\x0D\x0A}\x0D\x0A\x0D\x0A.closeBtn:hover,\x0D\x0A.closeBtn:focus {\x0D\x0A    color: #000;\x0D\x0A    text-decoration: none;\x0D\x0A    cursor: pointer;\x0D\x0A}\x0D\x0A\x0D\x0A\x0D\x0A'}`
    ));
document['head']['appendChild'](
    styleItem);
$('#adCard')['css']({
    display: 'none'
});
$('#pre-content-container')['css']({
    display: 'none'
});
document['addEventListener']('keydown',
    function (_0xa196x33) {
        if (_0xa196x33['keyCode'] ==
            dab && document[
                'activeElement'][
                'id']['toLowerCase']
            () !== 'chatbox') {
            console['log']('done');
            storeEquip(0)
        } else {
            if (_0xa196x33[
                    'keyCode'] ==
                27) {
                if (modal['style'][
                        'display'] =
                    'none') {
                    modal['style'][
                            'display'
                            ] =
                        'block'
                } else {
                    modal['style'][
                            'display'
                            ] =
                        'none'
                }
            } else {
                if (_0xa196x33[
                        'keyCode'
                        ] ==
                    TankGearKey &&
                    document[
                        'activeElement'
                        ]['id'][
                        'toLowerCase'
                        ]() !==
                    'chatbox') {
                    storeEquip(
                        ID_TankGear
                        )
                } else {
                    if (_0xa196x33[
                            'keyCode'
                            ] ==
                        EmpKey &&
                        document[
                            'activeElement'
                            ]['id'][
                            'toLowerCase'
                            ]() !==
                        'chatbox') {
                        storeEquip(
                            ID_EmpHelmet
                            )
                    } else {
                        if (_0xa196x33[
                                'keyCode'
                                ] ==
                            SamuKey &&
                            document[
                                'activeElement'
                                ][
                                'id'
                                ][
                                'toLowerCase'
                                ]
                        () !==
                            'chatbox'
                            ) {
                            hat(20)
                        } else {
                            if (_0xa196x33[
                                    'keyCode'
                                    ] ==
                                SpikeGearKey &&
                                document[
                                    'activeElement'
                                    ]
                                [
                                    'id']
                                [
                                    'toLowerCase']
                                () !==
                                'chatbox'
                                ) {
                                storeEquip
                                    (
                                        ID_SpikeGear)
                            } else {
                                if (_0xa196x33[
                                        'keyCode'
                                        ] ==
                                    TurretKey &&
                                    document[
                                        'activeElement'
                                        ]
                                    [
                                        'id']
                                    [
                                        'toLowerCase']
                                    () !==
                                    'chatbox'
                                    ) {
                                    storeEquip
                                        (
                                            ID_TurretGear);
                                    doNewSend
                                        (['13c', [0, 19,
                                            1
                                            ]])
                                }
                            }
                        }
                    }
                }
            }
        }
    });
var modal = document['getElementById'](
    'simpleModal');
var closeBtn = document[
    'getElementsByClassName'](
    'closeBtn')[0];
closeBtn['addEventListener']('click',
    closeModal);
window['addEventListener']('click',
    outsideClick);

function closeModal() {
    modal['style']['display'] = 'none'
}

function outsideClick(_0xa196x33) {
    if (_0xa196x33['target'] == modal) {
        modal['style']['display'] =
            'none'
    }
}
var m = document['querySelector']('#m');
m['addEventListener']('change',
    function () {
        if (this['checked']) {
            changehat = true;
            doNewSend(['ch', [
                'Melee Mod-ON'
                ]])
        } else {
            changehat = false;
            doNewSend(['ch', [
                'Melee Mod-OFF'
                ]])
        }
    });
var a1 = document['querySelector'](
'#n');
a1['addEventListener']('change',
    function () {
        if (this['checked']) {
            wingmod = true;
            doNewSend(['ch', [
                'Wing Change-ON'
                ]])
        } else {
            wingmod = false;
            doNewSend(['ch', [
                'Wing Change-OFF'
                ]])
        }
    });
var aht = document['querySelector'](
    '#aht');
aht['addEventListener']('change',
    function () {
        if (this['checked']) {
            healToggle = 1;
            doNewSend(['ch', [
                'AutoHeal-ON'
                ]])
        } else {
            healToggle = 0;
            doNewSend(['ch', [
                'AutoHeal-OFF'
                ]])
        }
    });
var auhat = document['querySelector'](
    '#auhat');
auhat['addEventListener']('change',
    function () {
        if (this['checked']) {
            hatToggle = 1;
            doNewSend(['ch', [
                'AutoHat-ON'
                ]])
        } else {
            healToggle = 0;
            doNewSend(['ch', [
                'AutoHat-OFF'
                ]])
        }
    });
var supa = document['querySelector'](
    '#Super');
supa['addEventListener']('change',
    function () {
        if (this['checked']) {
            qh = 1;
            healToggle = 0;
            doNewSend(['ch', [
                'SuperFastHeal-ON'
                ]])
        } else {
            qh = 0;
            healToggle = 1;
            doNewSend(['ch', [
                'SuperFastHeal-OFF'
                ]])
        }
    });
var LI = document['querySelector'](
    '#LI');
LI['addEventListener']('change',
    function () {
        if (this['checked']) {
            LagInsta = 1;
            ReverseLagInsta = 0;
            LegendaryInsta = 0;
            RenizInsta = 0;
            nolaginsta = 0;
            doNewSend(['ch', [
                'Red Dragon - Lag Insta ON'
                ]])
        } else {
            LagInsta = 0;
            doNewSend(['ch', [
                'Red Dragon - Lag Insta OFF'
                ]])
        }
    });
var RLI = document['querySelector'](
    '#RLI');
RLI['addEventListener']('change',
    function () {
        if (this['checked']) {
            ReverseLagInsta = 1;
            LegendaryInsta = 0;
            LagInsta = 0;
            RenizInsta = 0;
            nolaginsta = 0;
            doNewSend(['ch', [
                'Red Dragon - Rev Lag Insta ON'
                ]])
        } else {
            ReverseLagInsta = 0;
            doNewSend(['ch', [
                'Red Dragon - Rev Lag Insta OFF'
                ]])
        }
    });
var RI = document['querySelector'](
    '#RI');
RI['addEventListener']('change',
    function () {
        if (this['checked']) {
            RenizInsta = 1;
            ReverseLagInsta = 0;
            LegendaryInsta = 0;
            LagInsta = 0;
            nolaginsta = 0;
            doNewSend(['ch', [
                'Red Dragon - Normal Insta ON'
                ]])
        } else {
            RenizInsta = 0;
            doNewSend(['ch', [
                'Red Dragon - Normal Insta OFF'
                ]])
        }
    });
var LEGEND = document['querySelector'](
    '#LegendaryInsta');
LEGEND['addEventListener']('change',
    function () {
        if (this['checked']) {
            LegendaryInsta = 1;
            ReverseLagInsta = 0;
            LagInsta = 0;
            RenizInsta = 0;
            nolaginsta = 0;
            doNewSend(['ch', [
                'Red Dragon - Stacked Insta ON'
                ]])
        } else {
            LegendaryInsta = 0;
            doNewSend(['ch', [
                'Red Dragon - Stacked Insta OFF'
                ]])
        }
    });
var Nolag = document['querySelector'](
    '#NLI');
Nolag['addEventListener']('change',
    function () {
        if (this['checked']) {
            LegendaryInsta = 1;
            ReverseLagInsta = 0;
            LagInsta = 0;
            RenizInsta = 0;
            nolaginsta = 1;
            doNewSend(['ch', [
                'Red Dragon - Stacked Lag Insta ON'
                ]])
        } else {
            nolaginsta = 0;
            doNewSend(['ch', [
                'Red Dragon - Stacked Lag Insta OFF'
                ]])
        }
    });
var a100 = document['querySelector'](
    '#AIH');
a100['addEventListener']('change',
    function () {
        if (this['checked']) {
            AIH = true;
            doNewSend(['ch', [
                'Anti HP Low-ON'
                ]])
        } else {
            AIH = false;
            doNewSend(['ch', [
                'Anti Hp Low-OFF'
                ]])
        }
    });
var a2 = document['querySelector'](
    '#AI');
a2['addEventListener']('change',
    function () {
        if (this['checked']) {
            Antiweapon = true;
            doNewSend(['ch', [
                'Red Dragon - Anti Weapon ON'
                ]])
        } else {
            Antiweapon = false;
            doNewSend(['ch', [
                'Red Dragon - Anti Weapon OFF'
                ]])
        }
    });
var a3 = document['querySelector'](
    '#AB');
a3['addEventListener']('change',
    function () {
        if (this['checked']) {
            Antibow = true;
            doNewSend(['ch', [
                'Red Dragon - Anti Bow ON'
                ]])
        } else {
            Antibow = false;
            doNewSend(['ch', [
                'Red Dragon - Anti Bow OFF'
                ]])
        }
    });
var a4 = document['querySelector'](
    '#AA');
a4['addEventListener']('change',
    function () {
        if (this['checked']) {
            autoaim = true;
            doNewSend(['ch', [
                'Red Dragon - Auto Aim ON'
                ]])
        } else {
            autoaim = false;
            doNewSend(['ch', [
                'Red Dragon - Auto Aim OFF'
                ]])
        }
    });
var a5 = document['querySelector'](
    '#Rgi');
a5['addEventListener']('change',
    function () {
        if (this['checked']) {
            autoinsta = true;
            doNewSend(['ch', [
                'Red Dragon - Auto Insta ON'
                ]])
        } else {
            autoinsta = false;
            doNewSend(['ch', [
                'Red Dragon - Auto Insta OFF'
                ]])
        }
    });
var a6 = document['querySelector'](
    '#abt');
a6['addEventListener']('change',
    function () {
        if (this['checked']) {
            autobreaktrap = true;
            doNewSend(['ch', [
                'Red Dragon - Auto Break ON'
                ]])
        } else {
            autobreaktrap = false;
            doNewSend(['ch', [
                'Red Dragon - Auto Break OFF'
                ]])
        }
    });
var dab = document['querySelector'](
    '#katana');
a6['addEventListener']('change',
    function () {
        if (this['checked']) {
            var katanaheal = 1;
            doNewSend(['ch', [
                'Red Dragon - Katana Heal ON'
                ]])
        } else {
            var katanaheal = 0;
            doNewSend(['ch', [
                'Red Dragon - Katana Heal OFF'
                ]])
        }
    });
var a6 = document['querySelector'](
    '#anti');
a6['addEventListener']('change',
    function () {
        if (this['checked']) {
            var antitoggle = 1;
            doNewSend(['ch', [
                'Red Dragon - Anti Insta ON'
                ]])
        } else {
            var antitoggle = 0;
            doNewSend(['ch', [
                'Red Dragon - Anti Insta OFF'
                ]])
        }
    });
var checkbox = document['querySelector']
    ('#myCheck');
checkbox['addEventListener']('change',
    function () {
        if (this['checked']) {
            $('#mapDisplay')['css']
        ({
                background: `${'url(\'https://media.discordapp.net/attachments/759094121339158582/762938586726400020/a1479853846_5.png?width=427&height=427\')'}`
            });
            console['log'](
                'checked')
        } else {
            $('#mapDisplay')['css']
        ({
                background: `${'rgba(0, 0, 0, 0.25)'}`
            });
            console['log'](
                'unchecked')
        }
    });
var lel = false;

function nothig() {
    var lel = false;
    console['log']('fOlS')
}
setInterval(() => {
    var _0xa196xf8 = document[
        'getElementById'](
        'ach1')['value'];
    if (_0xa196xf8 == 1) {
        nothig()
    } else {
        doNewSend(['ch', [
            _0xa196xf8
            ]])
    }
}, 1000);
unsafeWindow['admob'] = {
    requestInterstitialAd: () => {},
    showInterstitialAd: () => {}
};

function ichat(_0xa196xfa, _0xa196xfb) {
    var _0xa196xfc = document[
        'getElementById']('ach2')[
        'value'];
    let _0xa196xfd = '';
    let _0xa196xfe;
    if (_0xa196xfa) {
        _0xa196xfe = _0xa196xfc
    };
    if (_0xa196xfa) {
        _0xa196xfe = _0xa196xfe[
            'padStart']((30 -
            _0xa196xfe['length']
            ) / 2 + _0xa196xfe[
            'length']);
        _0xa196xfe = _0xa196xfe[
            'padEnd'](30)
    };
    let _0xa196xff = 0;
    for (let _0xa196x87 =
        0; _0xa196x87 < _0xa196xfe[
            'length']; _0xa196x87++) {
        if (Math['floor'](Math['random']
                () * _0xa196xfb) == 0 &&
            _0xa196xfe['charAt'](
                _0xa196x87) != '-' &&
            _0xa196xff < 0 &&
            _0xa196xfe['charAt'](
                _0xa196x87) != ' ') {
            _0xa196xfd += '';
            _0xa196xff++
        } else {
            _0xa196xfd += _0xa196xfe[
                'charAt'](
                _0xa196x87)
        }
    };
    return _0xa196xfd
}
const stycross = ['Default (Cursor)',
    'Default (Crosshair)',
    'Default (Red)',
    'Default (Blue)',
    'Default (Green)',
    'Default (Yellow)',
    'Default (Purple)',
    'Middle Finger',
    'Corona Virus (Red)',
    'Corona Virus (Blue)',
    'Minecraft Sword',
    'Minecraft Pickaxe',
    'Minecraft Axe', 'Reddot',
    'Crossdot', 'Smalldot',
    'Crosshair', 'Crosshair Maxi',
    'Crosshair Mini',
    'Crosshair Spray',
    'Crosshair Sniper',
    'Crosshair Bazooka',
    'Crosshair Alien',
    'Crosshair (Black)',
    'Crosshair (Red)',
    'Crosshair (Blue)',
    'Crosshair (Green)',
    'Crosshair (Gold)',
    'Crosshair (Gold+)',
    'Crosshair (Silver)',
    'CrosshairX (Black)',
    'CrosshairX (Red)',
    'CrosshairX (Blue)',
    'CrosshairX (Green)',
    'CrosshairL (Red)',
    'CrosshairL (Blue)',
    'CrosshairL (Green)',
    'CrosshairL (Yellow)',
    'CrosshairL (Purple)'];
var stylerSelect = document[
    'createElement']('select');
stylerSelect['style'][
    'backgroundColor'] = 'white';
stylerSelect['style']['color'] = 'red';
stylerSelect['id'] = 'cursor-game';
stylerSelect['style']['marginBottom'] =
    '0px';
for (var mn = 0; mn < stycross[
    'length']; mn++) {
    var optioner = document[
        'createElement']('option');
    optioner['text'] = stycross[mn];
    if (stycross[mn] ==
        'Default (Cursor)') {
        optioner['value'] = 'auto'
    };
    if (stycross[mn] ==
        'Default (Crosshair)') {
        optioner['value'] =
            'url(\'http://cur.cursors-4u.net/user/use-1/use153.cur\'), auto'
    };
    if (stycross[mn] ==
        'Default (Blue)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=25204\'), auto'
    };
    if (stycross[mn] ==
        'Default (Red)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=25209\'), auto'
    };
    if (stycross[mn] ==
        'Default (Green)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=25203\'), auto'
    };
    if (stycross[mn] ==
        'Default (Yellow)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=25211\'), auto'
    };
    if (stycross[mn] ==
        'Default (Purple)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=25208\'), auto'
    };
    if (stycross[mn] ==
        'Middle Finger') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=23291\'), auto'
    };
    if (stycross[mn] ==
        'Corona Virus (Red)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=134748\'), auto'
    };
    if (stycross[mn] ==
        'Corona Virus (Blue)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=134662\'), auto'
    };
    if (stycross[mn] ==
        'Minecraft Sword') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=129896\'), auto'
    };
    if (stycross[mn] ==
        'Minecraft Pickaxe') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=129911\'), auto'
    };
    if (stycross[mn] ==
        'Minecraft Axe') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=129903\'), auto'
    };
    if (stycross[mn] ==
        'Crosshair Maxi') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=30924\'), auto'
    };
    if (stycross[mn] ==
        'Crosshair Mini') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=30925\'), auto'
    };
    if (stycross[mn] ==
        'Crosshair Spray') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=31245\'), auto'
    };
    if (stycross[mn] ==
        'Crosshair Sniper') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=31250\'), auto'
    };
    if (stycross[mn] ==
        'Crosshair Bazooka') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=31248\'), auto'
    };
    if (stycross[mn] ==
        'CrosshairX (Black)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=42279\'), auto'
    };
    if (stycross[mn] ==
        'CrosshairX (Blue)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=42285\'), auto'
    };
    if (stycross[mn] ==
        'CrosshairX (Red)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=42287\'), auto'
    };
    if (stycross[mn] ==
        'CrosshairX (Green)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=42286\'), auto'
    };
    if (stycross[mn] ==
        'Crosshair Alien') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=42281\'), auto'
    };
    if (stycross[mn] ==
        'Crosshair (Black)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=42280\'), auto'
    };
    if (stycross[mn] ==
        'Crosshair (Blue)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=42288\'), auto'
    };
    if (stycross[mn] ==
        'Crosshair (Red)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=42290\'), auto'
    };
    if (stycross[mn] ==
        'Crosshair (Green)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=42289\'), auto'
    };
    if (stycross[mn] ==
        'Crosshair (Gold)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=97792\'), auto'
    };
    if (stycross[mn] ==
        'Crosshair (Gold+)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=97801\'), auto'
    };
    if (stycross[mn] ==
        'Crosshair (Silver)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=99159\'), auto'
    };
    if (stycross[mn] == 'Reddot') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=47970\'), auto'
    };
    if (stycross[mn] == 'Crossdot') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=47974\'), auto'
    };
    if (stycross[mn] == 'Smalldot') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=47971\'), auto'
    };
    if (stycross[mn] ==
        'CrosshairL (Blue)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=42292\'), auto'
    };
    if (stycross[mn] ==
        'CrosshairL (Red)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=42294\'), auto'
    };
    if (stycross[mn] ==
        'CrosshairL (Green)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=42293\'), auto'
    };
    if (stycross[mn] ==
        'CrosshairL (Yellow)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=42300\'), auto'
    };
    if (stycross[mn] ==
        'CrosshairL (Purple)') {
        optioner['value'] =
            'url(\'http://www.rw-designer.com/cursor-extern.php?id=42295\'), auto'
    };
    stylerSelect['add'](optioner)
};
document['getElementById']('setupCard')[
    'appendChild'](stylerSelect);
stylerSelect['onchange'] = function () {
    document['body']['style'][
        'cursor'] = document[
        'getElementById'](
        'cursor-game')[
        'options'][document[
        'getElementById'](
        'cursor-game')[
        'selectedIndex']][
        'value']
};
var ues = storeEquip;
var sec = 0;
var Menit = 0;
var Houre = 0;
setInterval(() => {
    setTimeout(() => {
        sec = (sec + 1)
    }, 0)
}, 1000);
setInterval(() => {
    if (sec == 60) {
        sec = 0;
        Menit = (Menit + 1)
    }
}, 0);
setInterval(() => {
    if (Menit == 60) {
        Menit = 0;
        Houre = (Houre + 1)
    }
}, 0);
var Clock = document['createElement'](
    'div');
Clock['style']['padding'] = '5px';
Clock['id'] = 'ClockDiv';
Clock['style']['font'] = '30px Arial';
Clock['style']['display'] = 'block';
Clock['style']['position'] = 'fixed';
Clock['style']['top'] = '0%';
Clock['style']['left'] = '0%';
Clock['textContent'] = 'Loading';
document['body']['appendChild'](Clock);
setInterval(() => {
    Clock['textContent'] =
        'Red Dragon Clock [ ' +
        Houre + ':' + Menit +
        ':' + sec + ' ]'
}, 0);
var w = document['createElement'](
'div');
w['style']['padding'] = '5px';
w['id'] = 'wDiv';
w['style']['font'] = '30px Arial';
w['style']['display'] = 'block';
w['style']['position'] = 'fixed';
w['style']['top'] = '0%';
w['style']['left'] = '0%';
w['textContent'] = 'Loading';
document['body']['appendChild'](w);
setInterval(() => {
    w['textContent'] =
        'Red Dragon Clock [ ' +
        Houre + ':' + Menit +
        ':' + sec + ' ]'
}, 0);
var S = document['createElement'](
'div');
S['style']['padding'] = '5px';
S['id'] = 'SDiv';
S['style']['font'] = '30px Arial';
S['style']['display'] = 'block';
S['style']['position'] = 'fixed';
S['style']['top'] = '0%';
S['style']['left'] = '0%';
S['textContent'] = 'Loading';
document['body']['appendChild'](S);
setInterval(() => {
    S['textContent'] =
        'Red Dragon Clock [ ' +
        Houre + ':' + Menit +
        ':' + sec + ' ]'
}, 0);
var d = document['createElement'](
'div');
d['style']['padding'] = '5px';
d['id'] = 'dDiv';
d['style']['font'] = '30px Arial';
d['style']['display'] = 'block';
d['style']['position'] = 'fixed';
d['style']['top'] = '0%';
d['style']['left'] = '0%';
d['textContent'] = 'Loading';
document['body']['appendChild'](d);
setInterval(() => {
    d['textContent'] =
        'Red Dragon Clock [ ' +
        Houre + ':' + Menit +
        ':' + sec + ' ]'
}, 0);
var a = document['createElement'](
'div');
a['style']['padding'] = '5px';
a['id'] = 'aDiv';
a['style']['font'] = '30px Arial';
a['style']['display'] = 'block';
a['style']['position'] = 'fixed';
a['style']['top'] = '0%';
a['style']['left'] = '0%';
a['textContent'] = 'Loading';
document['body']['appendChild'](a);
setInterval(() => {
    a['textContent'] =
        'Red Dragon Clock [ ' +
        Houre + ':' + Menit +
        ':' + sec + ' ]'
}, 0);

function Parse() {
    document['addEventListener'](
        'keydown',
        function (_0xa196x10d) {
            if (_0xa196x10d[
                    'keyCode'] ==
                89124) {
                storeBuy(6);
                console['info'](
                    'Attempted to buy soldier'
                    )
            }
        })
}
document['addEventListener']('keydown',
    function (_0xa196x10d) {
        if (_0xa196x10d[
            'keyCode'] == 161475278
            ) {
            storeBuy(12);
            console['info'](
                'Attempted to buy samurai'
                )
        }
    });;;
document['addEventListener']('keydown',
    function (_0xa196x10d) {
        if (_0xa196x10d[
            'keyCode'] == 2278271) {
            storeBuy(22);
            console['info'](
                'Attempted to buy emp'
                )
        }
    });;;
document['addEventListener']('keydown',
    function (_0xa196x10d) {
        if (_0xa196x10d[
            'keyCode'] == 782725) {
            storeBuy(20);
            console['info'](
                'Attempted to buy flipper'
                )
        }
    });;;
document['addEventListener']('keydown',
    function (_0xa196x10d) {
        if (_0xa196x10d[
            'keyCode'] == 728721) {
            storeBuy(26);
            console['info'](
                'Attempted to buy Barbarian'
                )
        }
    });;;
document['addEventListener']('keydown',
    function (_0xa196x10d) {
        if (_0xa196x10d[
            'keyCode'] == 828724) {
            storeBuy(7);
            console['info'](
                'Attempted to buy bull'
                )
        }
    });;;
document['addEventListener']('keydown',
    function (_0xa196x10d) {
        if (_0xa196x10d[
            'keyCode'] == 728723) {
            storeBuy(11);
            console['info'](
                'Attempted to buy Spike'
                )
        }
    });;;
document['addEventListener']('keydown',
    function (_0xa196x10d) {
        if (_0xa196x10d[
            'keyCode'] == 728724) {
            storeBuy(53);
            console['info'](
                'Attempted to buy turret'
                )
        }
    });;;
document['addEventListener']('keydown',
    function (_0xa196x10d) {
        if (_0xa196x10d[
            'keyCode'] == 928720) {
            storeBuy(40);
            console['info'](
                'Attempted to buy Tank'
                )
        }
    });;;
document['addEventListener']('keydown',
    function (_0xa196x10d) {
        if (_0xa196x10d[
            'keyCode'] == 128727) {
            storeBuy(27);
            console['info'](
                'Attempted to buy scavenger'
                )
        }
    });;;
Parse();
document['getElementById']('gameName')[
    'innerHTML'] = 'Red Dragon ';
setInterval(() => {
    setTimeout(() => {
        document[
                'getElementById'
                ](
                'gameName'
                )[
                'innerHTML'
                ] =
            'Red Dragon';
        setTimeout(
    () => {
            document
                [
                    'getElementById']
                (
                    'gameName')[
                    'innerHTML'
                    ] =
                'Red Dragon';
            setTimeout
                (() => {
                        document
                            [
                                'getElementById']
                            (
                                'gameName')[
                                'innerHTML'
                                ] =
                            'Red Dragon';
                        setTimeout
                            (() => {
                                    document
                                        [
                                            'getElementById']
                                        (
                                            'gameName')[
                                            'innerHTML'
                                            ] =
                                        'Red Dragon';
                                    setTimeout
                                        (() => {
                                                document
                                                    [
                                                        'getElementById']
                                                    (
                                                        'gameName')[
                                                        'innerHTML'
                                                        ] =
                                                    'Red Dragon';
                                                setTimeout
                                                    (() => {
                                                            document
                                                                [
                                                                    'getElementById']
                                                                (
                                                                    'gameName')[
                                                                    'innerHTML'
                                                                    ] =
                                                                'Red Dragon';
                                                            setTimeout
                                                                (() => {
                                                                        document
                                                                            [
                                                                                'getElementById']
                                                                            (
                                                                                'gameName')[
                                                                                'innerHTML'
                                                                                ] =
                                                                            'Red Dragon';
                                                                        setTimeout
                                                                            (() => {
                                                                                    document
                                                                                        [
                                                                                            'getElementById']
                                                                                        (
                                                                                            'gameName')[
                                                                                            'innerHTML'
                                                                                            ] =
                                                                                        'Red Dragon';
                                                                                    setTimeout
                                                                                        (() => {
                                                                                                document
                                                                                                    [
                                                                                                        'getElementById']
                                                                                                    (
                                                                                                        'gameName')[
                                                                                                        'innerHTML'
                                                                                                        ] =
                                                                                                    'Red Dragon';
                                                                                                setTimeout
                                                                                                    (() => {
                                                                                                            document
                                                                                                                [
                                                                                                                    'getElementById']
                                                                                                                (
                                                                                                                    'gameName')[
                                                                                                                    'innerHTML'
                                                                                                                    ] =
                                                                                                                'Red Dragon ';
                                                                                                            setTimeout
                                                                                                                (() => {
                                                                                                                        document
                                                                                                                            [
                                                                                                                                'getElementById']
                                                                                                                            (
                                                                                                                                'gameName')[
                                                                                                                                'innerHTML'
                                                                                                                                ] =
                                                                                                                            'Red Dragon ';
                                                                                                                        setTimeout
                                                                                                                            (() => {
                                                                                                                                    document
                                                                                                                                        [
                                                                                                                                            'getElementById']
                                                                                                                                        (
                                                                                                                                            'gameName')[
                                                                                                                                            'innerHTML'
                                                                                                                                            ] =
                                                                                                                                        'Red Dragon '
                                                                                                                                },
                                                                                                                                100
                                                                                                                                )
                                                                                                                    },
                                                                                                                    100
                                                                                                                    )
                                                                                                        },
                                                                                                        100
                                                                                                        )
                                                                                            },
                                                                                            100
                                                                                            )
                                                                                },
                                                                                100
                                                                                )
                                                                    },
                                                                    100
                                                                    )
                                                        },
                                                        100
                                                        )
                                            },
                                            100
                                            )
                                },
                                100
                                )
                    },
                    100
                    )
        }, 100)
    }, 100)
}, 1850);
setInterval(() => {
    setTimeout(() => {
        document[
                'getElementById'
                ](
                'chatBox'
                )[
                'placeholder'
                ] =
            '\xF0\u0178\u2019\xACMessage\xF0\u0178\u2019\xAC';
        setTimeout(
    () => {
            document
                [
                    'getElementById']
                (
                    'chatBox')[
                    'placeholder'
                    ] =
                '\xF0\u0178\u2019\xACMessage.\xF0\u0178\u2019\xAC';
            setTimeout
                (() => {
                        document
                            [
                                'getElementById']
                            (
                                'chatBox')[
                                'placeholder'
                                ] =
                            '\xF0\u0178\u2019\xACMessage..\xF0\u0178\u2019\xAC';
                        setTimeout
                            (() => {
                                    document
                                        [
                                            'getElementById']
                                        (
                                            'chatBox')[
                                            'placeholder'
                                            ] =
                                        '\xF0\u0178\u2019\xACMessage...\xF0\u0178\u2019\xAC'
                                },
                                100
                                )
                    },
                    100
                    )
        }, 100)
    }, 100)
}, 500);
document['getElementById']('enterGame')[
        'innerHTML'] =
    '~|\xF0\u0178\u2019\u017D Red Dragon \xF0\u0178\u2019\u017D|~';
setInterval(() => {
    setTimeout(() => {
        document[
                'getElementById'
                ](
                'enterGame'
                )[
                'innerHTML'
                ] =
            '\xF0\u0178\u2019Red Dragon \xF0\u0178\u2019\u017D';
        setTimeout(
    () => {
            document
                [
                    'getElementById']
                (
                    'enterGame')[
                    'innerHTML'
                    ] =
                '\xF0\u0178\u2019Red Dragon \xF0\u0178\u2019\u017D';
            setTimeout
                (() => {
                        document
                            [
                                'getElementById']
                            (
                                'enterGame')[
                                'innerHTML'
                                ] =
                            '\xF0\u0178\u2019Red Dragon \xF0\u0178\u2019\u017D';
                        setTimeout
                            (() => {
                                    document
                                        [
                                            'getElementById']
                                        (
                                            'enterGame')[
                                            'innerHTML'
                                            ] =
                                        '\xF0\u0178\u2019Red Dragon \xF0\u0178\u2019\u017D';
                                    setTimeout
                                        (() => {
                                                document
                                                    [
                                                        'getElementById']
                                                    (
                                                        'enterGame')[
                                                        'innerHTML'
                                                        ] =
                                                    '\xF0\u0178\u2019Red Dragon \xF0\u0178\u2019\u017D';
                                                setTimeout
                                                    (() => {
                                                            document
                                                                [
                                                                    'getElementById']
                                                                (
                                                                    'enterGame')[
                                                                    'innerHTML'
                                                                    ] =
                                                                '\xF0\u0178\u2019Red Dragon \xF0\u0178\u2019\u017D';
                                                            setTimeout
                                                                (() => {
                                                                        document
                                                                            [
                                                                                'getElementById']
                                                                            (
                                                                                'enterGame')[
                                                                                'innerHTML'
                                                                                ] =
                                                                            '\xF0\u0178\u2019Red Dragon \xF0\u0178\u2019\u017D';
                                                                        setTimeout
                                                                            (() => {
                                                                                    document
                                                                                        [
                                                                                            'getElementById']
                                                                                        (
                                                                                            'enterGame')[
                                                                                            'innerHTML'
                                                                                            ] =
                                                                                        '\xF0\u0178\u2019Red Dragon\xF0\u0178\u2019\u017D';
                                                                                    setTimeout
                                                                                        (() => {
                                                                                                document
                                                                                                    [
                                                                                                        'getElementById']
                                                                                                    (
                                                                                                        'enterGame')[
                                                                                                        'innerHTML'
                                                                                                        ] =
                                                                                                    '\xF0\u0178\u2019Red Dragon \xF0\u0178\u2019\u017D';
                                                                                                setTimeout
                                                                                                    (() => {
                                                                                                            document
                                                                                                                [
                                                                                                                    'getElementById']
                                                                                                                (
                                                                                                                    'enterGame')[
                                                                                                                    'innerHTML'
                                                                                                                    ] =
                                                                                                                '\xF0\u0178\u2019Red Dragon \xF0\u0178\u2019\u017D';
                                                                                                            setTimeout
                                                                                                                (() => {
                                                                                                                        document
                                                                                                                            [
                                                                                                                                'getElementById']
                                                                                                                            (
                                                                                                                                'enterGame')[
                                                                                                                                'innerHTML'
                                                                                                                                ] =
                                                                                                                            '\xF0\u0178\u2019Red Dragon \xF0\u0178\u2019\u017D';
                                                                                                                        setTimeout
                                                                                                                            (() => {
                                                                                                                                    document
                                                                                                                                        [
                                                                                                                                            'getElementById']
                                                                                                                                        (
                                                                                                                                            'enterGame')[
                                                                                                                                            'innerHTML'
                                                                                                                                            ] =
                                                                                                                                        '\xF0\u0178\u2019Red Dragon \xF0\u0178\u2019\u017D'
                                                                                                                                },
                                                                                                                                100
                                                                                                                                )
                                                                                                                    },
                                                                                                                    100
                                                                                                                    )
                                                                                                        },
                                                                                                        100
                                                                                                        )
                                                                                            },
                                                                                            100
                                                                                            )
                                                                                },
                                                                                100
                                                                                )
                                                                    },
                                                                    100
                                                                    )
                                                        },
                                                        100
                                                        )
                                            },
                                            100
                                            )
                                },
                                100
                                )
                    },
                    100
                    )
        }, 100)
    }, 100)
}, 1850);
document['getElementById']('gameName')[
    'style']['color'] = 'red';
document['getElementById']('guideCard')[
    'remove']();
document['getElementById'](
        'loadingText')['innerHTML'] =
    '. . . . . . . . . Red Dragon . . . . . . . . . .';
document['getElementById']('nameInput')[
    'placeholder'] = 'Red Dragon';
document['getElementById']('chatBox')[
    'placeholder'] = 'Enter Message';
document['getElementById'](
        'pingDisplay')['style'][
    'color'] = 'red';
document['getElementById']('diedText')[
    'innerHTML'] = 'Game Over';
document['getElementById']('diedText')[
    'style']['color'] = 'red';
document['getElementById'](
        'storeHolder')['style'] =
    'height: 2200px; width: 450px;';
document['getElementById'](
        'allianceHolder')['style'] =
    'height: 1200px; width: 450px;';
document['getElementById']('adCard')[
    'remove']();
document['getElementById'](
    'errorNotification')['remove']();
document['getElementById'](
    'youtuberOf')['remove']();
document['getElementById']('promoImg')[
    'remove']();
document['getElementById'](
        'leaderboard')['style'][
    'color'] = 'red';
document['getElementById']('gameName')[
    'style']['color'] = 'red';
document['getElementById']('setupCard')[
    'style']['color'] = 'red';
document['getElementById']('promoImg')[
    'remove']();
document['getElementById'](
    'scocyanisplay')['style'][
    'color'] = 'red';
document['getElementById'](
        'woodDisplay')['style'][
    'color'] = 'red';
document['getElementById'](
    'stoneDisplay')['style'][
    'color'] = 'red';
document['getElementById'](
        'killCounter')['style'][
    'color'] = 'red';
document['getElementById'](
        'foodDisplay')['style'][
    'color'] = 'red';
document['getElementById']('ageText')[
    'style']['color'] = 'black';
document['getElementById'](
    'allianceButton')['style'][
    'color'] = 'white';
document['getElementById'](
    'chatButton')['style']['color'] =
    'white';
document['getElementById'](
        'storeButton')['style'][
    'color'] = 'white';
setInterval(() => {
    return window['follmoo'] &&
        follmoo()
}, 0);
$('.menuCard')['css']({
    'white-space': 'normal',
    'text-align': 'center',
    'background-color': 'rgba(0, 0, 0, 0)',
    '-moz-box-shadow': '0px 0px rgba(255, 255, 255, 0)',
    '-webkit-box-shadow': '0px 0px rgba(255, 255, 255, 0)',
    'box-shadow': '0px 0px rgba(255, 255, 255, 0)',
    '-webkit-border-radius': '0px',
    '-moz-border-radius': '0px',
    'border-radius': '0px',
    'margin': '15px',
    'margin-top': '15px'
});
$('#menuContainer')['css']({
    'white-space': 'normal'
});
$('#nativeResolution')['css']({
    'cursor': 'pointer'
});
$('#playMusic')['css']({
    'cursor': 'pointer'
});
$('#guideCard')['css']({
    'overflow-y': 'hidden',
    'margin-top': 'auto',
    'margin-bottom': '30px'
});
$('#gameName')['css']({
    'color': '#000000',
    'text-shadow': '0 1px 0 rgba(231, 76, 60), 0 2px 0 rgba(231, 76, 60), 0 3px 0 rgba(231, 76, 60), 0 4px 0 rgba(231, 76, 60), 0 5px 0 rgba(0, 0, 0), 0 6px 0 rgba(231, 76, 60), 0 7px 0 rgba(231, 76, 60), 0 8px 0 rgba(231, 76, 60), 0 9px 0 rgba(255, 0, 0)',
    'text-align': 'center',
    'font-size': '156px',
    'margin-bottom': '-30px'
});
$('#skinColorHolder')['css']({
    'margin-bottom': '30.75px'
});
$('.settingRadio')['css']({
    'margin-bottom': '30.75px'
});
$('#linksContainer2')['css']({
    '-webkit-border-radius': '0px 0 0 0',
    '-moz-border-radius': '0px 0 0 0',
    'border-radius': '0px 0 0 0',
    'right': '44%',
    'left': '44%',
    'background-color': 'rgba(0, 0, 0, 0)',
    'text-align': 'center',
    'bottom': '12px'
});
$('#gameName')['css']({
    'color': '#144db4',
    'text-shadow': '0 1px 0 rgba(231, 76, 60), 0 2px 0 rgba(231, 76, 60), 0 3px 0 rgba(231, 76, 60), 0 4px 0 rgba(231, 76, 60), 0 5px 0 rgba(231, 76, 60), 0 6px 0 rgba(231, 76, 60), 0 7px 0 rgba(231, 76, 60), 0 8px 0 rgba(231, 76, 60), 0 9px 0 rgba(255, 0, 0)',
    'text-align': 'center',
    'font-size': '156px',
    'margin-bottom': '-30px'
});
$('pingDisplay')['css']({
    'color': '#FF0000',
    'text-shadow': '0 1px 0 rgba(255, 255, 255, 0), 0 2px 0 rgba(255, 255, 255, 0), 0 3px 0 rgba(255, 255, 255, 0), 0 4px 0 rgba(255, 255, 255, 0), 0 5px 0 rgba(255, 255, 255, 0), 0 6px 0 rgba(255, 255, 255, 0), 0 7px 0 rgba(255, 255, 255, 0), 0 8px 0 rgba(255, 255, 255, 0), 0 9px 0 rgba(255, 255, 255, 0)',
    'text-align': 'center',
    'font-size': '156px',
    'margin-bottom': '-30px'
});
$('#loadingText')['css']({
    'color': '#000000',
    'background-color': 'rgba(0, 0, 0, 0)',
    'padding': '8px',
    'right': '150%',
    'left': '150%',
    'margin-top': '40px'
});
$('.ytLink')['css']({
    'color': '#144db4',
    'padding': '8px',
    'background-color': 'rgba(0, 0, 0, 0)'
});
$('.menuLink')['css']({
    'color': '#144db4'
});
$('#nameInput')['css']({
    'border-radius': '0px',
    '-moz-border-radius': '0px',
    '-webkit-border-radius': '0px',
    'border': 'hidden'
});
$('#serverSelect')['css']({
    'cursor': 'pointer',
    'color': '#000000',
    'background-color': '#808080',
    'border': 'hidden',
    'font-size': '20px'
});
$('.menuButton')['css']({
    'border-radius': '0px',
    '-moz-border-radius': '0px',
    '-webkit-border-radius': '0px'
});
$('#promoImgHolder')['css']({
    'position': 'absolute',
    'bottom': '-7%',
    'left': '20px',
    'width': '420px',
    'height': '236.25px',
    'padding-bottom': '18px',
    'margin-top': '0px'
});
$('#adCard')['css']({
    'position': 'absolute',
    'bottom': '-7%',
    'right': '20px',
    'width': '420px',
    'height': '236.25px',
    'padding-bottom': '18px'
});
$('.menuHeader')['css']({
    'color': 'rgba(255, 255, 255, 1)'
});
$('#killCounter')['css']({
    'color': '#ededed'
});
$('#diedText')['css']({
    'background-color': 'rgba(0, 0, 0, 0)'
});
$('#gameCanvas')['css']({
    'background-color': '#f4f4f4'
});
$('#allianceButton')['css']({
    'color': 'rgba(241, 241, 241, 1)'
});
$('#storeButton')['css']({
    'color': 'rgba(241, 241, 241, 1)'
});
$('#chatButton')['css']({
    'color': 'rgba(241, 241, 241, 1)'
});
$('.gameButton')['css']({
    '-webkit-border-radius': '0px 0 0 0',
    '-moz-border-radius': '0px 0 0 0',
    'border-radius': '0px 0 0 0',
    'background-color': 'rgba(0, 0, 0, 0.4)'
});
$('.uiElement, .resourceDisplay')['css']
    ({
        '-webkit-border-radius': '0px',
        '-moz-border-radius': '0px',
        'border-radius': '0px',
        'background-color': 'rgba(0, 0, 0, 0.4)'
    });
$('#chatBox')['css']({
    '-webkit-border-radius': '0px',
    '-moz-border-radius': '0px',
    'border-radius': '700px',
    'background-color': 'rgba(0, 0, 0, 0.18)',
    'text-align': 'center'
});
$('#foodDisplay')['css']({
    'color': '#ae4d54'
});
$('#storeItem')['css']({
    'color': '80eefc'
});
$('#woodDisplay')['css']({
    'color': '#758f58'
});
$('#stoneDisplay')['css']({
    'color': '#818198'
});
$('#scocyanisplay')['css']({
    'color': '#c2b17a'
});
$('#leaderboard')['css']({
    'border': '3px solid #FFB900'
});
$('#ageText')['css']({
    'color': '#ffdfd'
});
$('#ageBar')['css']({
    '-webkit-border-radius': '10px',
    '-moz-border-radius': '10px',
    'border-radius': '10px',
    'background-color': 'rgba(0, 0, 0, 0.4)'
});
$('#ageBarBody')['css']({
    '-webkit-border-radius': '10px',
    '-moz-border-radius': '10px',
    'border-radius': '10px',
    'background-color': '#ae4d54'
});
$('.storeTab')['css']({
    '-webkit-border-radius': '0px',
    '-moz-border-radius': '0px',
    'border-radius': '0px',
    'background-color': 'rgba(0, 0, 0, 0.4)'
});
$('#storeHolder')['css']({
    '-webkit-border-radius': '10px',
    '-moz-border-radius': '20px',
    'border-radius': '50px',
    'background-color': 'rgba(0, 0, 0, 0.4)'
});
$('#allianceHolder')['css']({
    '-webkit-border-radius': '0px',
    '-moz-border-radius': '0px',
    'border-radius': '0px',
    'background-color': 'rgba(0, 0, 0, 0.4)'
});
$('.actionBarItem')['css']({
    '-webkit-border-radius': '0px',
    'border-radius': '0px',
    'background-color': 'rgba(0, 0, 0, 0.4)'
});
$('#itemInfoHolder')['css']({
    'text-align': 'center',
    'color': '#00dcff',
    'top': '75px',
    'left': '350px',
    'right': '350px',
    'max-width': '650px'
});
var myElement = document[
    'querySelector']('#nameInput');
myElement['style']['backgroundColor'] =
    '#fffdfd';
myElement['style']['color'] = '#000000';
var getElement = document[
    'querySelector']('#enterGame');
getElement['style']['backgroundColor'] =
    '#d61818';
getElement['style']['color'] = '#000000'
