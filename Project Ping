// ==UserScript==// ==UserScript==
// @name        Project Ping
// @namespace    SHHHHHH
// @version      V1
// @description  Op mod lmaooo
// @author       Not Zika#6198 (with help from FZ Broadcasts#5926, Black.#5292, and Instant-Speed#9167)
// @match        *://moomoo.io/*
// @match        *://dev.moomoo.io/*
// @match        *://sandbox.moomoo.io/*
// @grant        none
// @require https://greasyfork.org/scripts/368273-msgpack/code/msgpack.js?version=598723
// @require http://code.jquery.com/jquerAy-3.3.1.min.js
// @require https://code.jquery.com/ui/1.12.0/jquery-ui.min.js
// @require https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.0/jquery-confirm.min.js
// @icon    https://i.ytimg.com/vi/PTFciChVSCo/maxresdefault.jpg
// ==/UserScript==
const pingDisplay = $("#pingDisplay");
pingDisplay.css("top");
pingDisplay.css("display", "block");
$("body").append(pingDisplay);

let chatmir = false
$("#mainMenu")[0].style.backgroundImage = "url(https://surviv.io/img/main_splash.jpg)"
$("#consentBlock").css({display: "none"});
//$("#youtuberOf").css({display: "none"});
$("#mapDisplay").css({background: `url('https://i.imgur.com/fgFsQJp.png')`});
document.getElementById("moomooio_728x90_home").style.display = "none";
selectSkinColor("constructor")
$("#moomooio_728x90_home").parent().css({display: "none"});
window.onbeforeunload = null;
let mouseX;
let mouseY;
let width;
let height;
setInterval(() => {
   if(clanToggle == 1) {
        doNewSend(["9", [null]]);
        doNewSend(["8", [animate(false, 5)]])
    }
    doNewSend(["testing", [6]]);
}, 200);
setInterval(() => {
    if(messageToggle == 1) {
        doNewSend(["ch", [animate(true, 5)]])
    }
}, 200);
setInterval(() => {
    if(autoaim == true) {
        doNewSend(["2", [nearestEnemyAngle]]);
    }
}, 0);
setInterval(() => {
    if(hatToggle == 1) {
        if(oldHat != normalHat) {
            hat(normalHat);
            console.log("Tried. - Hat")
        }
        if(oldAcc != normalAcc) {
            acc(normalAcc);
            console.log("Tried. - Acc")
        }
        oldHat = normalHat;
        oldAcc = normalAcc
    }
}, 25);
function normal() {
    hat(normalHat);
    acc(normalAcc);
}

function aim(x, y){
     var cvs = document.getElementById("gameCanvas");
     cvs.dispatchEvent(new MouseEvent("mousemove", {
         clientX: x,
         clientY: y

     }));
}
let coreURL = new URL(window.location.href);
window.sessionStorage.force = coreURL.searchParams.get("fc");
if (window.sessionStorage.force != "false" && window.sessionStorage.force && window.sessionStorage.force.toString() != "null"){
    document.getElementsByClassName("menuHeader")[0].innerHTML = `Servers <span style="color: red;">Force (${window.sessionStorage.force})</span>`;
}
class ForceSocket extends WebSocket {
          constructor(...args){
              if (window.sessionStorage.force != "false" && window.sessionStorage.force && window.sessionStorage.force.toString() != "null"){
                  let server = window.sessionStorage.force;
                  let sip = "";
                  for (let gameServer of window.vultr.servers){
                      if (`${gameServer.region}:${gameServer.index}:0` == server){
                               sip = gameServer.ip;
                      }
                  }
                  args[0] = `wss://ip_${sip}.moomoo.io:8008/?gameIndex=0`;
                  delete window.sessionStorage.force;
              }
             super(...args);
          }

}
WebSocket = ForceSocket;

var nearestEnemy;
var nearestEnemyAngle;
var isEnemyNear;
var instaSpeed = 75;
var primary;
var anticlown = true
var antiinsta = true
var secondary;
var foodType;
var wallType;
var spikeType;
var millType;
var mineType;
var boostType;
var turretType;
var spawnpadType;
var autoaim = false;
var tick = 1;
var oldHat;
var oldAcc;
var enemiesNear;
var normalHat;
var normalAcc;
var ws;
var msgpack5 = msgpack;
var boostDir;
let myPlayer = {
    id: null,
    x: null,
    y: null,
    dir: null,
    object: null,
    weapon: null,
    clan: null,
    isLeader: null,
    hat: null,
    accessory: null,
    isSkull: null
};








let healSpeed = 80;
var messageToggle = 0;
var clanToggle = 0;
let healToggle = 1;
let hatToggle = 0;
let action = 0;
let stuffs = 1;
let heal = 1;
let Rq = 0;
let af = true;
const CanvasAPI = document.getElementById("gameCanvas")
CanvasAPI.addEventListener("mousedown", buttonPressD, false);

function buttonPressD(e) {
if (e.button == 2) {
        doNewSend(["13c", [1, 20, 0]]);
        doNewSend(["13c", [1, 53, 0]]);
        doNewSend(["13c", [1, 11, 0]]);
        doNewSend(["13c", [0, 20, 0]]);
        setTimeout( () => {
            doNewSend(["13c", [1, 40, 0]]);
            doNewSend(["13c", [0, 40, 0]]);
            doNewSend(["13c", [0, 0, 1]]);
            doNewSend(["13c", [1, 18, 1]]);
            doNewSend(["13c", [0, 18, 1]]);
        }, 20);
        doNewSend(["7", [1]]);
        setTimeout( () => {
            doNewSend(["13c", [1, 21, 1]]);
            doNewSend(["13c", [0, 21, 1]]);
            doNewSend(["13c", [1, 11, 0]]);
            doNewSend(["13c", [0, 11, 0]]);
        }, 120);
        setTimeout( () => {
            doNewSend(["7", [1]]);
        }, 280);
    }
}








document.msgpack = msgpack;
function n(){
     this.buffer = new Uint8Array([0]);
     this.buffer.__proto__ = new Uint8Array;
     this.type = 0;
}








WebSocket.prototype.oldSend = WebSocket.prototype.send;
WebSocket.prototype.send = function(m){
    if (!ws){
        document.ws = this;








        ws = this;
        socketFound(this);
    }
    this.oldSend(m);
};
















function socketFound(socket){
    socket.addEventListener('message', function(message){
        handleMessage(message);
    });
}








function handleMessage(m){
    let temp = msgpack5.decode(new Uint8Array(m.data));
    let data;
    if(temp.length > 1) {
        data = [temp[0], ...temp[1]];
        if (data[1] instanceof Array){
            data = data;
        }
    } else {
      data = temp;
    }
    let item = data[0];
    if(!data) {return};








    if(item === "io-init") {
            let cvs = document.getElementById("gameCanvas");
            width = cvs.clientWidth;
            height = cvs.clientHeight;
            $(window).resize(function() {
                width = cvs.clientWidth;
                height = cvs.clientHeight;
            });
            cvs.addEventListener("mousemove", e => {
                mouseX = e.clientX;
                mouseY = e.clientY;
            });
        }








    if (item == "1" && myPlayer.id == null){
        myPlayer.id = data[1];
    }








    if (item == "33") {
        enemiesNear = [];
        for(let i = 0; i < data[1].length / 13; i++) {
            let playerInfo = data[1].slice(13*i, 13*i+13);
            if(playerInfo[0] == myPlayer.id) {
                myPlayer.x = playerInfo[1];
                myPlayer.y = playerInfo[2];
                myPlayer.dir = playerInfo[3];
                myPlayer.object = playerInfo[4];
                myPlayer.weapon = playerInfo[5];
                myPlayer.clan = playerInfo[7];
                myPlayer.isLeader = playerInfo[8];
                myPlayer.hat = playerInfo[9];
                myPlayer.accessory = playerInfo[10];
                myPlayer.isSkull = playerInfo[11];
            } else if(playerInfo[7] != myPlayer.clan || playerInfo[7] === null) {
                enemiesNear.push(playerInfo);
            }
        }
    }








    isEnemyNear = false;
    if(enemiesNear) {
        nearestEnemy = enemiesNear.sort((a,b) => dist(a, myPlayer) - dist(b, myPlayer))[0];
    }
















    if(nearestEnemy) {
        nearestEnemyAngle = Math.atan2(nearestEnemy[2]-myPlayer.y, nearestEnemy[1]-myPlayer.x);
        if(Math.sqrt(Math.pow((myPlayer.y-nearestEnemy[2]), 2) + Math.pow((myPlayer.x-nearestEnemy[1]), 2)) < 300) {
            isEnemyNear = true;
            if(autoaim == false && myPlayer.hat != 7 && myPlayer.hat != 53) {
                normalHat = 6;
                if(primary != 8) {
                    normalAcc = 19
                }
            };
        }
    }








    if(isEnemyNear == false && autoaim == false) {
        normalAcc = 11;
        if (myPlayer.y < 2400){
            normalHat = 15;
        } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
            normalHat = 31;
        } else {
                normalHat = 12;
        }
    }
    if (!nearestEnemy) {
        nearestEnemyAngle = myPlayer.dir;
    }
           if(item == "h" && data[1] == myPlayer.id) {
    if(data[2] < 51 && af == 1 && af == 1) {
    hat(7)
    setTimeout(function() {
    hat(12)
    }, 1000)
    if(myPlayer.hat != 6) {
    place(foodType,0);
    place(foodType,0);
    } else {
    setTimeout(function() {
    Full(foodType,0,1);
    Full(foodType,0,1);
    }, 0);
    }
    if(myPlayer.hat == 6 && foodType == "0", foodType == "0") {
    Full(foodType,0,1);
    place(foodType,0,1);
    setTimeout(() => {
    place(foodType,0,1);
    place(foodType,0,1);
    }, 0);
    if(data[2] < 41 && af == 1 && af == 1) {
    if(myPlayer.hat == 6 && foodType == "0", foodType == "0") {
    place(foodType,0,1);
    Full(foodType,0,1);
    setTimeout(() => {
    place(foodType,0,1);
    place(foodType,0,1);
    }, 0.0);
    if(data[2] < 31 && af == 1 && af == 1) {
    if(myPlayer.hat == 6 && foodType == "0", foodType == "0") {
    place(foodType,0,1);
    place(foodType,0,1);
    setTimeout(() => {
    place(foodType,0,1);
    place(foodType,0,1);
    }, 0.0);
    if(data[2] < 75 && af == 1 && af == 1) {
    if(myPlayer.hat == 6 && foodType == "0", foodType == "0") {
    place(foodType,0,1);
    place(foodType,0,1);
    setTimeout(() => {
    place(foodType,0,1);
    place(foodType,0,1);
    }, 0.0);
    }
    }
    }
    }
    }
    }
    }
    }
    }
    let Antibull=1
                  if(item == "h" && data[1] == myPlayer.id) {
               if(data[2] <= 40 && Antibull == 1 && myPlayer.hat == 11) {
                   console.log("reaperx = noob");
            autoaim = true;
        doNewSend(["5", [primary, true]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 18, 1]]);
        doNewSend(["c", [1]]);
        setTimeout(() => {
        doNewSend(["c", [1]]);
            }, 1);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
        setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 2);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
        setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 3);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
        setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 4);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
        setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 5);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
        setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 6);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 7);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 8);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 9);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 10);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 11);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 12);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 13);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 14);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 15);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 16);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 17);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 18);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 19);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 20);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 21);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 22);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 23);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 24);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 25);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 26);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 27);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 28);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 29);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 30);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 31);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 32);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 33);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 34);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 35);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 36);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 37);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 38);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 39);
        doNewSend(["c", [1]]);
        doNewSend(["c", [0]]);
            setTimeout(() => {
        doNewSend(["c", [1]]);
            doNewSend(["c", [0]]);
            }, 40);
             setTimeout(() => {
            doNewSend(["13c", [0, 53, 0]]);
                 }, 122)
             setTimeout(() => {
            doNewSend(["c", [0, null]]);
            doNewSend(["13c", [0, 0, 0]]);
            doNewSend(["13c", [0, 53, 0]]);
            doNewSend(["13c", [0, 21, 1]]);
        }, 148)
                   setTimeout(() => {
                                   doNewSend(["c", [0, null]]);
            doNewSend(["13c", [0, 0, 0]]);
            doNewSend(["13c", [0, 53, 0]]);
            doNewSend(["13c", [0, 21, 1]]);
            autoaim = false
                   }, 150)
               }
}
    if(item == "h" && data[1] == myPlayer.id) {
        if(data[2] < 100 && data[2] > 0 && healToggle == 1 && af == 1) {
            setTimeout( () => {
                Full(foodType, null);
            }, 56);








        }
    }
    if(item == "ch" && data[2].toLowerCase().split(' ')[0] == "!chatmirror" && data[1] == myPlayer.id){
        chatmir = !chatmir
        doNewSend(['ch', ['ChatMirror: ' + chatmir]])
    }
    if(item == "ch" && data[2].toLowerCase().split(' ')[0] !== "!chatmirror" && data[1] !== myPlayer.id){
        doNewSend(['ch', [data[2]]])
    }
    update();
}
















function doNewSend(sender){
    ws.send(new Uint8Array(Array.from(msgpack5.encode(sender))));
}








function acc(id) {
    doNewSend(["13c", [0, 0, 1]]);
    doNewSend(["13c", [0, id, 1]]);
}








function hat(id) {
    doNewSend(["13c", [0, id, 0]]);
}
















function place(id, angle = Math.atan2(mouseY - height / 2, mouseX - width / 2)) {
    doNewSend(["5", [id, null]]);
    doNewSend(["c", [1, angle]]);
    doNewSend(["c", [0, angle]]);
    doNewSend(["5", [myPlayer.weapon, true]]);
}
function Full(id, angle = Math.atan2(mouseY - height / 2, mouseX - width / 2)) {
    doNewSend(["5", [id, null]]);
    doNewSend(["c", [1, angle]]);
    doNewSend(["c", [0, angle]]);
    doNewSend(["5", [myPlayer.weapon, true]]);
        doNewSend(["5", [id, null]]);
    doNewSend(["c", [1, angle]]);
    doNewSend(["c", [0, angle]]);
    doNewSend(["5", [myPlayer.weapon, true]]);
        doNewSend(["5", [id, null]]);
    doNewSend(["c", [1, angle]]);
    doNewSend(["c", [0, angle]]);
    doNewSend(["5", [myPlayer.weapon, true]]);
}
function haha() {
  if(Rq == false) {
    place(foodType);
  }
}








function boostSpike() {
    if(boostDir == null) {
        boostDir = nearestEnemyAngle;
    }
    place(millType, boostDir + toRad(90));
    place(millType, boostDir - toRad(90));
    place(boostType, boostDir);
    doNewSend(["33", [boostDir]]);
}
function boostWall() {
    if(boostDir == null) {
        boostDir = nearestEnemyAngle;
    }
    place(wallType, boostDir + toRad(90));
    place(wallType, boostDir - toRad(90));
    place(boostType, boostDir);
    doNewSend(["33", [boostDir]]);
}
function fourSpike() {
        place(spikeType, myPlayer.dir + toRad(0));
        place(spikeType, myPlayer.dir - toRad(90));
        place(spikeType, myPlayer.dir + toRad(90));
        place(spikeType, myPlayer.dir - toRad(180));
        place(spikeType, myPlayer.dir + toRad(45));
        place(spikeType, myPlayer.dir - toRad(45));
        place(spikeType, myPlayer.dir + toRad(135));
        place(spikeType, myPlayer.dir - toRad(135));
        place(spikeType, myPlayer.dir + toRad(60));
        place(spikeType, myPlayer.dir - toRad(60));
        place(spikeType, myPlayer.dir + toRad(150));
        place(spikeType, myPlayer.dir - toRad(150));
        place(spikeType, myPlayer.dir + toRad(30));
        place(spikeType, myPlayer.dir - toRad(30));
        place(spikeType, myPlayer.dir + toRad(120));
        place(spikeType, myPlayer.dir - toRad(120));
}
var repeater = function(key, action, interval) {
    let _isKeyDown = false;
    let _intervalId = undefined;








    return {
        start(keycode) {
            if(keycode == key && document.activeElement.id.toLowerCase() !== 'chatbox') {
                _isKeyDown = true;
                if(_intervalId === undefined) {
                    _intervalId = setInterval(() => {
                        action();
                        if(!_isKeyDown){
                            clearInterval(_intervalId);
                            _intervalId = undefined;
                            console.log("claered");
                        }
                    }, interval);
                }
            }
        },








        stop(keycode) {
            if(keycode == key && document.activeElement.id.toLowerCase() !== 'chatbox') {
                _isKeyDown = false;
            }
        }
    };
















}








const healer = repeater(81, haha, 0);
const boostPlacer = repeater(70, () => {place(boostType)}, 0);
const spikePlacer = repeater(86, () => {place(spikeType)}, 0);
const millPlacer = repeater(78, () => {place(millType, Math.atan2(mouseY - height / 2, mouseX - width / 2) + toRad(9000000000));
                                       place(millType, Math.atan2(mouseY - height / 2, mouseX - width / 2) + toRad(9000000090));
                                       place(millType, Math.atan2(mouseY - height / 2, mouseX - width / 2) + toRad(9000000270))
                                       }, 50);
const turretPlacer = repeater(72, () => {place(turretType)}, 0);
const wallPlacer = repeater(52, () => {place(wallType)}, 0);
const boostSpiker = repeater(79, boostSpike, 0);
const boostWaller = repeater(191, boostWall, 0);
const fourSpiker = repeater(66, fourSpike, 0);
















document.addEventListener('keydown', (e)=>{
    spikePlacer.start(e.keyCode);
    healer.start(e.keyCode);
    boostPlacer.start(e.keyCode);
    boostWaller.start(e.keyCode);
    fourSpiker.start(e.keyCode);
    boostSpiker.start(e.keyCode);
    millPlacer.start(e.keyCode);
    wallPlacer.start(e.keyCode);
    turretPlacer.start(e.keyCode);








    if (e.keyCode == 79 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        for (let i=0;i<5;i++){
             let angle = myPlayer.dir + toRad(i * 72);
             place(millType, angle)
        }
    }
    if (e.keyCode == 80 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        for (let i=0;i<4;i++){
             let angle = myPlayer.dir + toRad(i * 90);
             place(wallType, angle)
        }
    }
    if (e.keyCode == 72 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        place(turretType, myPlayer.dir + toRad(45));
        place(turretType, myPlayer.dir - toRad(45));
        place(turretType, myPlayer.dir + toRad(45));
        place(turretType, myPlayer.dir - toRad(45));
    }
        if (e.keyCode == 189 && document.activeElement.id.toLowerCase() !== 'chatbox') {
    af = (af + 1) % 2;
    if(af == 0) {
    } else {
    }
    }
    let antibull = 1;
            if (e.keyCode == 222 && document.activeElement.id.toLowerCase() !== 'chatbox') {
    antibull = (antibull + 1) % 2;
    if(antibull == 0) {
    } else {
    }
    }
    if (e.keyCode == 188 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        place(wallType, myPlayer.dir + toRad(90));
        place(spikeType, myPlayer.dir + toRad(180));
        place(boostType, myPlayer.dir + toRad(270));
        place(millType, myPlayer.dir + toRad(0));
    }
    if (e.keyCode == 33 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        place(boostType, myPlayer.dir + toRad(45));
        place(boostType, myPlayer.dir - toRad(45));
        place(spikeType, myPlayer.dir + toRad(135));
        place(spikeType, myPlayer.dir + toRad(225));
    }
    if (e.keyCode == 70 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        place(boostType, myPlayer.dir + toRad(45));
        place(boostType, myPlayer.dir - toRad(45));
        place(boostType, myPlayer.dir + toRad(135));
        place(boostType, myPlayer.dir + toRad(225));
    }
    if(e.keyCode == 71 && document.activeElement.id.toLowerCase() !== 'chatbox') {
autoaim = true;
doNewSend(["5", [primary, true]]);
doNewSend(["13c", [0, 7, 0]]);
doNewSend(["13c", [0, 18, 1]]);
doNewSend(["c", [1]]);
  setTimeout( () => {
doNewSend(["6", [5]]);
doNewSend(["6", [17]]);
doNewSend(["6", [31]]);
doNewSend(["6", [23]]);
doNewSend(["6", [9]]);
doNewSend(["6", [38]]);
    doNewSend(["c", [1]]);
  }, 100);
setTimeout(() => {
  doNewSend(["c", [1]]);
doNewSend(["c", [1]]);
doNewSend(["6", [4]]);
}, 200)
  setTimeout( () => {
doNewSend(["5", [secondary, true]])
doNewSend(["c", [1]]);
doNewSend(["13c", [0, 53, 0]]);
  }, 300);
  setTimeout( () => {
    doNewSend(["6", [15]]);
  }, 410);
  setTimeout( () => {
doNewSend(["5", [primary, true]]);
doNewSend(["c", [0, null]]);
doNewSend(["13c", [0, 6, 0]]);
doNewSend(["13c", [0, 11, 1]]);
autoaim = false;
  }, 560);
}
    if(e.keyCode == 77 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        // Age 1 Polearm Musket Auto-Insta
        doNewSend(["6", [5]]);
        doNewSend(["6", [17]]);
        doNewSend(["6", [31]]);
        doNewSend(["6", [23]]);
        doNewSend(["6", [9]]);
        doNewSend(["6", [37]]);
        doNewSend(["6", [4]]);
        doNewSend(["6", [15]]);
        autoaim = true;
        doNewSend(["5", [primary, true]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 19, 1]]);
        doNewSend(["c", [1]]);
        setTimeout( () => {
            doNewSend(["13c", [0, 53, 0]]);
            doNewSend(["13c", [0, 21, 1]]);
            doNewSend(["5", [secondary, true]]);
        }, instaSpeed - 120);
        setTimeout( () => {
            doNewSend(["ch", [""]]);
            doNewSend(["5", [primary, true]]);
            doNewSend(["c", [0, null]]);
            doNewSend(["13c", [0, 0, 0]]);
            doNewSend(["13c", [0, 6, 0]]);
            doNewSend(["13c", [0, 11, 1]]);
            autoaim = false;
            doNewSend(["5", [secondary, true]]);
        }, instaSpeed);
    }










    if (e.keyCode == 32 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        if (myPlayer.y < 2400){
            hat(15);
        } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
            hat(31);
        } else {
            hat(12);
        }
acc(11);
    }
    if (e.keyCode == 32 && document.activeElement.id.toLowerCase() !== 'chatbox') {
doNewSend(['5', ['length', !0]]);
    }







    if (e.keyCode == 16 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        if (myPlayer.y < 2400){
            hat(15);
        } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
            hat(31);
        } else {
                hat(12);
        }
        acc(11);
    }
if(action == true) {
            if(e.keyCode == 87 && document.activeElement.id.toLowerCase() !== 'chatbox')
           doNewSend(["ch", [""]]);
            }
        if(action == true) {
            if(e.keyCode == 83 && document.activeElement.id.toLowerCase() !== 'chatbox')
           doNewSend(["ch", [""]]);
            }
        if(action == true) {
            if(e.keyCode == 65 && document.activeElement.id.toLowerCase() !== 'chatbox')
           doNewSend(["ch", [""]]);
            }
        if(action == true) {
            if(e.keyCode == 68 && document.activeElement.id.toLowerCase() !== 'chatbox')
           doNewSend(["ch", [""]]);
            }
    if(action == true) {
            if(e.keyCode == 89 && document.activeElement.id.toLowerCase() !== 'chatbox')
           doNewSend(["ch", [""]]);
            }
    if(action == true) {
            if(e.keyCode == 87 && document.activeElement.id.toLowerCase() !== 'chatbox')
           doNewSend(["ch", [""]]);
            }
    if(action == true) {
            if(e.keyCode == 84 && document.activeElement.id.toLowerCase() !== 'chatbox')
           doNewSend(["ch", [""]]);
            }
    if(action == true) {
            if(e.keyCode == 67 && document.activeElement.id.toLowerCase() !== 'chatbox')
           doNewSend(["ch", ["Tank Abuse."]]);
            }
    if(action == true) {
            if(e.keyCode == 71 && document.activeElement.id.toLowerCase() !== 'chatbox')
           doNewSend(["ch", ["!"]]);
            }
    if(action == true) {
            if(e.keyCode == 82 && document.activeElement.id.toLowerCase() !== 'chatbox')
          doNewSend(["ch", ["!"]]);
    }
    if (e.keyCode == 90 && document.activeElement.id.toLowerCase() !== 'chatbox') {
            hat(7);
            acc(18);
    }
    if(e.keyCode == 76 && document.activeElement.id.toLowerCase() !== 'chatbox')
          doNewSend(["ch", ["Oops..."]]);

    if (isEnemyNear["ch", ["Flagged insta Threat."]]);








    if (e.keyCode == 84 && document.activeElement.id.toLowerCase() !== 'chatbox') {
            hat(26);
            acc(21);
    }
    if (e.keyCode == 89 && document.actveElement.id.toLowerCase() !== 'chatbox') {
            hat(6);
            acc(19);
    }
    if (e.keyCode == 192 && document.activeElement.id.toLowerCase() !== 'chatbox') {
            hat(11);
            acc(21);
    }
    if (e.keyCode == 67 && document.activeElement.id.toLowerCase() !== 'chatbox') {
            hat(40);
            acc(21);
    }





    if(e.keyCode == 82 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        hat(20);
        autoaim = true;
        doNewSend(["5", [primary, true]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 18, 1]]);
        doNewSend(["c", [1]]);
        setTimeout( () => {
            doNewSend(["13c", [0, 53, 0]]);
            doNewSend(["5", [secondary, true]]);
            acc(13);
        }, 110);
        setTimeout( () => {
            doNewSend(["c", [0, null]]);
            doNewSend(["13c", [0, 0, 0]]);
            autoaim = false;
        }, 215);
        setTimeout(() => {
            doNewSend(["5", [secondary, true]]);
            doNewSend(["13c", [0, 20, 0]]);
            setTimeout(() => {
                doNewSend(["5", [primary, true]]);
                if (isEnemyNear == false) {
                    if (myPlayer.y < 2400) {
                        hat(15);
                    } else if (myPlayer.y > 6850 && myPlayer.y < 7550) {
                        hat(31);
                    } else {
                        hat(12);
                    }
                    acc(11);
                }
            }, 1680);
        }, 325);
    }












    if(e.keyCode == 85 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        autoaim = true;
            doNewSend(["5", [primary, true]]);
            doNewSend(["13c", [0, 7, 0]]);
            doNewSend(["13c", [0, 0, 1]]);
            doNewSend(["13c", [0, 18, 1]]);
            doNewSend(["c", [1]]);








        setTimeout( () => {
            doNewSend(["6", [5]]);
        }, 100);








        setTimeout( () => {
            doNewSend(["13c", [0, 53, 0]]);
            place(spikeType, myPlayer.dir + toRad(0));
        }, 200);







        setTimeout( () => {
            doNewSend(["5", [primary, true]]);
            doNewSend(["c", [0, null]]);
            doNewSend(["13c", [0, 0, 0]]);
            doNewSend(["13c", [0, 6, 0]]);
            doNewSend(["13c", [0, 19, 1]]);
            autoaim = false;
        }, 300);
    }
            if(e.keyCode == 79 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["5"]);
                doNewSend(["13c", [0, 40, 0]])
                setTimeout( () => {
             doNewSend(["c", [0, null]]);
             autoaim = false;
         }, 200);
            }
    if(e.keyCode == 219 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        autoaim = true;
        doNewSend(["5", [primary, true]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 19, 1]]);
        place(spikeType, myPlayer.dir + toRad(45));
        place(spikeType, myPlayer.dir - toRad(45));
        place(spikeType, myPlayer.dir + toRad(45));
        doNewSend(["c", [1]]);








        setTimeout( () => {
            doNewSend(["13c", [0, 53, 0]]);
        }, 100);








        setTimeout( () => {
            doNewSend(["c", [0, null]]);
            doNewSend(["13c", [0, 0, 0]]);
            doNewSend(["13c", [0, 6, 0]]);
            autoaim = false;
        }, 200);
    }








 if(e.keyCode == 104 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        autoaim = false;
        doNewSend(["5", [primary, true]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 18, 1]]);
        doNewSend(["c", [1]]);








        setTimeout( () => {
            doNewSend(["13c", [0, 53, 0]]);
        }, 120);








        setTimeout( () => {
            doNewSend(["c", [0, null]]);
            doNewSend(["13c", [0, 0, 0]]);
            doNewSend(["13c", [0, 11, 1]]);
            doNewSend(["13c", [0, 12, 0]]);
            autoaim = true;
        }, 220);
    }








    if(e.keyCode == 38 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        messageToggle = (messageToggle + 1) % 2;
    }








    if(e.keyCode == 40 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        clanToggle = (clanToggle + 1) % 2;
    }








    if(e.keyCode == 17 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        healToggle = (healToggle + 1) % 2;
        if(healToggle == 0) {
            if(hatToggle == 0) {
                document.title = "Anti: OFF | Hats: OFF"
            } else {
                document.title = "Anti: OFF | Hats: ON"
            }
        } else {
            if(hatToggle == 0) {
                document.title = "Anti: ON | Hats: OFF"
            } else {
                document.title = "Anti: ON | Hats: ON"
            }
        }
    }
    if (e.keyCode == 16 && document.activeElement.id.toLowerCase() !== 'chatbox') {
                doNewSend(["13c", [1, 11, 1]]);
                doNewSend(["13c", [0, 0, 1]]);
                doNewSend(["13c", [0, 0, 0]]);
        if (myPlayer.y < 2400){
                doNewSend(["13c", [0, 11, 1]]);
                doNewSend(["13c", [1, 15, 0]]);
                doNewSend(["13c", [0, 15, 0]]);
        } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
                doNewSend(["13c", [0, 11, 1]]);
                doNewSend(["13c", [1, 31, 0]]);
                doNewSend(["13c", [0, 31, 0]]);
        } else if (isEnemyNear == true){
                doNewSend(["13c", [0, 21, 1]]);
                doNewSend(["13c", [1, 6, 0]]);
                doNewSend(["13c", [0, 6, 0]]);
        } else {
                doNewSend(["13c", [0, 11, 1]]);
                doNewSend(["13c", [1, 12, 0]]);
                doNewSend(["13c", [0, 12, 0]]);
        }
    }
         if(e.keyCode == 75 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        if (action == false) {
            action = true;
        doNewSend(["ch", ["On"]]);
        } else {
        doNewSend(["ch", ["Off"]]);
           action = false;
    }
    }
             if(e.keyCode == 17 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        if (heal == false) {
            heal = true;
        doNewSend(["ch", ["Anti: On"]]);
        } else {
        doNewSend(["ch", ["Anti: Off"]]);
           heal = false;
    }
    }
    if(e.keyCode == 76 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        autoaim = true;
        doNewSend(["5", [secondary, true]]);
        doNewSend(["13c", [0, 53, 0]]);
        doNewSend(["c", [1]]);








        setTimeout( () => {
            doNewSend(["13c", [0, 10, 0]]);
            doNewSend(["6", [12]]);








        }, 100);








        setTimeout( () => {
            doNewSend(["6", [15]]);








        }, 200);








        setTimeout( () => {
            doNewSend(["c", [0]]);
            doNewSend(["5", [primary, true]]);
            autoaim = false;
        }, 300);
    }






   if(e.keyCode == 20 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        hat(28);
        acc(8);
    }

    if(e.keyCode == 97 && document.activeElement.id.toLowerCase() !== 'chatbox') { ///num1 katana [age 8]
        doNewSend(["6", [4]]);
    }
    if(e.keyCode == 98 && document.activeElement.id.toLowerCase() !== 'chatbox') { ///num2 musket [age 9]
        doNewSend(["6", [15]]);
    }
    if(e.keyCode == 98 && document.activeElement.id.toLowerCase() !== 'chatbox') { ///num2 crossbow [age 8]
        doNewSend(["6", [12]]);
    }
    if(e.keyCode == 105 && document.activeElement.id.toLowerCase() !== 'chatbox') { ///num9 max mill [age 8]
        doNewSend(["6", [28]]);
    }
    if(e.keyCode == 104 && document.activeElement.id.toLowerCase() !== 'chatbox') { ///num8 max wall [age 7]
        doNewSend(["6", [21]]);
    }
    if(e.keyCode == 101 && document.activeElement.id.toLowerCase() !== 'chatbox') { ///num5 spin spike [age 9]
        doNewSend(["6", [25]]);
    }
    if(e.keyCode == 102 && document.activeElement.id.toLowerCase() !== 'chatbox') { ///num6 fast crossbow [age 9]
        doNewSend(["6", [13]]);
    }
    if(e.keyCode == 99 && document.activeElement.id.toLowerCase() !== 'chatbox') { ///num3 great axe [age 8]
        doNewSend(["6", [2]]);
    }
    if(e.keyCode == 9 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        hatToggle = (hatToggle + 1) % 2;
        if(healToggle == 0) {
            if(hatToggle == 0) {
                document.title = "Anti mode: OFF | Hats: OFF"
                doNewSend(["ch", ["Hats: Off"]]);
            } else {
                document.title = "Anti: OFF | Hats: ON"
                          doNewSend(["ch", ["Hats: On"]]);
            }
        } else {
            if(hatToggle == 0) {
                document.title = "Anti: ON | Hats: OFF"
                doNewSend(["ch", ["Hats: On"]]);
            } else {
                document.title = "Anti: ON | Hats: ON"
                doNewSend(["ch", ["Hats: On"]]);
            }
        }
    }
})








document.addEventListener('keyup', (e)=>{
    spikePlacer.stop(e.keyCode);
    boostPlacer.stop(e.keyCode);
    boostWaller.stop(e.keyCode);
    fourSpiker.stop(e.keyCode);
    boostSpiker.stop(e.keyCode);
    millPlacer.stop(e.keyCode);
    turretPlacer.stop(e.keyCode);
    wallPlacer.stop(e.keyCode);
    healer.stop(e.keyCode);
    if(e.keyCode == 79 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        setTimeout( () => {
            doNewSend(["33", [null]]);
            boostDir = null;
        }, 10);
    }
    if(e.keyCode == 221 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        setTimeout( () => {
            doNewSend(["33"]);
        }, 1);
    }
    if(e.keyCode == 191 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        setTimeout( () => {
            doNewSend(["33", [null]]);
            boostDir = null;
        }, 10);
    }
})
function isElementVisible(e) {
    return (e.offsetParent !== null);
}
















function toRad(angle) {
    return angle * 0.01745329251;
}








function dist(a, b){
    return Math.sqrt( Math.pow((b.y-a[2]), 2) + Math.pow((b.x-a[1]), 2) );
}








function animate(space, chance) {
    let result = '';
    let characters;
    if(space) {
        characters = 'Ggs';
    } else {
        characters = '-_-'
    }
    if(space) {
        characters = characters.padStart((30 - characters.length) / 2 + characters.length)
        characters = characters.padEnd(30);
    }
    let count = 0;
    for (let i = 0; i < characters.length; i++ ) {
       if(Math.floor(Math.random() * chance) == 1 && characters.charAt(i) != "-" && count < 2 && characters.charAt(i) != " ") {
           result += ".";
           count++
       } else {
           result += characters.charAt(i);
       }
    }
    return result;
}








document.title = "MooMoo.io | Not Zika?"








function update() {
    for (let i=0;i<9;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            primary = i;
        }
    }








    for (let i=9;i<16;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            secondary = i;
        }
    }








    for (let i=16;i<19;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            foodType = i - 16;
        }
    }








    for (let i=19;i<22;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            wallType = i - 16;
        }
    }








    for (let i=22;i<26;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            spikeType = i - 16;
        }
    }








    for (let i=26;i<29;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            millType = i - 16;
        }
    }








    for (let i=29;i<31;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            mineType = i - 16;
        }
    }








    for (let i=31;i<33;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            boostType = i - 16;
        }
    }








    for (let i=33;i<39;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString())) && i != 36){
            turretType = i - 16;
        }
    }








    spawnpadType = 36;
}








function createTribe(name) {
    leaveTribe();
    doNewSend(["8", [name]]);
}








function leaveTribe() {
    doNewSend(["9", [null]]);
}
















var _msgs = ["<Niggers>", "<<Niggers>>", "<<<Niggers>>>", "<<<<Niggers>>>>"];
var msgs = _msgs;
var msgCycleSwitch = false;
var shift = false;
var minus = false;
var home = false;
var chat;
var msgNum = 0;








var socket = null;








var scriptSetup = false;













if (storageAvailable('localStorage')){
   if (!localStorage.getItem("msgs")){
       localStorage.setItem("msgs", JSON.stringify(msgs));
   }else{
       let temp;
       try{
           temp = JSON.parse(localStorage.getItem("msgs"));
       }
       catch (e){
           alert("Invalid Array! Setting default...");
           saveData();
           temp = "";
       }
       if (temp !== ""){
           msgs = temp;
       }
   }
}








const overlay = {};
overlay.keyCode = 74;
overlay.toggle = false;
overlay.inputString = msgs.join("\n");
overlay.tempMsgs = _msgs;








function styleInit() {
    addGlobalStyle(`#chatCyclerUI{padding: 0.2em; margin:0.2em; position: absolute;top: 0;left: 0;width: 30%;
    background-color: rgba(255, 255, 255, 0.35);display:none;}`);
    addGlobalStyle(".table{ display: table; text-align: center; width: 100%; height: 80%;}");
    addGlobalStyle(".row{ display: table-row; }");
    addGlobalStyle(`.cell{ display: table-cell; padding: 0px 0.3em;border: 1px solid rgba(0, 0, 0, 0.5);}`);
    addGlobalStyle(`.backRed{background-color:#f14e54}`);
    function addGlobalStyle(css) {
        var head, style;
        head = document.getElementsByTagName('head')[0];
        if (!head) {
            return;
        }
        style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = css;
        head.appendChild(style);
    }
}








function toggleOverlay(tf){
    if (tf){
        document.querySelector('#chatCyclerUI').style.display = "block";
    }else{
        document.querySelector('#chatCyclerUI').style.display = "none";
    }
};








function ren_overlay(){
    const title = `<div style="font-size:32px;color:rgba(0, 0, 0, 0.75)">Menu</div>`;
    const descr = `<div>Press HOME to repeat this menu.</div>`;
    const body = `
            <div class="table">
                <div class="row">Message  Settings
                </div>
                <div class="row">
                    <div class="cell" style="vertical-align:middle">Messages</div>
                    <div class="cell" style="vertical-align:middle"><textarea name="overlay_messages" rows=4 cols=32 style="background-color:rgba(255, 255, 255, 0.35);resize:none;  rgba(255, 255, 255, 0.75) padding-left: 0px;border-left-width: 0px;border-top-width: 0px;padding-top: 0px;padding-right: 0px;border-right-width: 0px;padding-bottom: 0px;border-bottom-width: 0px;"></textarea></div>
                </div>
                <div class="row">
                    <div class="cell" style="vertical-align:middle">Save Message </div>
                    <div class="cell" style="vertical-align:middle"><input type="button" name="overlay_update_cycle" value="Save"  style="border-right-width: 0px;border-left-width: 0px;border-top-width: 0px;padding-left: 6px;border-bottom-width: 0px;"></div>
                </div>
                <br>
                <div class="row">Message  Repeat
                </div>
                <div class="row">
                    <div class="cell" style="vertical-align:middle">Repeat<br><span class="overlay_cycle_toggle_value"><span style="font-size:24px;color:rgba(0, 0, 0, 0.75)";>Off</span></span></div>
                    <div class="cell" style="vertical-align:middle"><input type="button" name="overlay_cycle_toggle" value="Repeat"></div>
                </div>
            </div>`;
    const footer = `<div style="font-size:24px;color:rgba(0, 0, 0, 0.75)">AutoChat</div>`;
    const temp = `${title} ${body} ${descr} ${footer}`;
    const d = document.createElement("div")
    d.id = "chatCyclerUI";
    d.innerHTML = temp;
    d.style.zIndex = 999999;
    document.body.appendChild(d);
    const val = document.querySelector('textarea[name="overlay_messages"]');
    val.value = overlay.inputString;
    val.addEventListener('input', function(e) {
        overlay.inputString = e.target.value;
    });
    document.querySelector('input[name="overlay_update_cycle"]').addEventListener('click', function() {
        if (!overlay.inputString){
            overlay.tempMsgs = _msgs;
        }else{
            overlay.tempMsgs = overlay.inputString.split(/\r?\n/);
        }
        msgNum = 99;
        msgs = overlay.tempMsgs;
        saveData();
    });
    document.querySelector('input[name="overlay_cycle_toggle"]').addEventListener('click', function(e) {
        msgCycleSwitch = !msgCycleSwitch;
        if (msgCycleSwitch){
            chat = setInterval(autoChat, 1);
            document.querySelector('.overlay_cycle_toggle_value').innerHTML = `<span style="font-size:24px;color:rgba(0, 0, 0, 0.75)";>On</span>`;
        }else{
            document.querySelector('.overlay_cycle_toggle_value').innerHTML = `<span style="font-size:24px;color:rgba(0, 0, 0, 0.75)";>Off</span>`;
            clearInterval(chat);
            msgNum = 0;
        }
    });
}








function concatBuffers(buffer1, buffer2){
  var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);
  tmp.set(new Uint8Array(buffer1), 0);
  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);
  return tmp.buffer;
}








const four = Uint8Array.from([4]).buffer;








function autoChat(){
    socket && socket.send(msgpack.encode(["ch", [msgs[msgNum]]]));
    msgNum++;
    if (msgNum >= msgs.length) msgNum = 0;
}








function storageAvailable(type){
        try{
                var storage = window[type],
                        x = '__storage_test__';
                storage.setItem(x, x);
                storage.removeItem(x);
                return true;
        }
        catch(e){
                return false;
        }
}








function saveData(){
    if (storageAvailable('localStorage')){
        localStorage.setItem("msgs", JSON.stringify(msgs));
    }
}








window.addEventListener('keydown', function (event){
    if (overlay.toggle) event.stopImmediatePropagation();
    if (!minus && event.keyCode === 19){ //L
        msgCycleSwitch = !msgCycleSwitch;
        if (msgCycleSwitch){
            chat = setInterval(autoChat, 0);
        }else{
            clearInterval(chat);
            msgNum =0;
        }
        minus = true;
    }
    if (!home && event.keyCode === overlay.keyCode){ //HOME
        overlay.toggle = !overlay.toggle;
        toggleOverlay(overlay.toggle);
        home = true;
    }
});








window.addEventListener('keypress', function (event){
    if (overlay.toggle) event.stopImmediatePropagation();
});







window.addEventListener('keyup', function (event){
    if (overlay.toggle) event.stopImmediatePropagation();
    if (event.keyCode == 19){
        minus = false;
    }else if (event.keyCode == 74){
        home = false;
    }
});





 (function() {
    'use strict';

    var kills = 1;

    setInterval(getkills, 250);

    function getkills(){
        var count = parseInt(document.getElementById("killCounter").innerText);
        if(count > kills){
            doNewSend(["ch", [count+"-0"]]);
        }
        kills = count;
    }
})();
let Anti=true
